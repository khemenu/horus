// Code generated by "protoc-gen-entpb". DO NOT EDIT

package bare

import (
	context "context"
	uuid "github.com/google/uuid"
	runtime "github.com/lesomnus/entpb/cmd/protoc-gen-entpb/runtime"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	horus "khepri.dev/horus"
	ent "khepri.dev/horus/ent"
	identity "khepri.dev/horus/ent/identity"
)

type IdentityServiceServer struct {
	db *ent.Client
	horus.UnimplementedIdentityServiceServer
}

func NewIdentityServiceServer(db *ent.Client) *IdentityServiceServer {
	return &IdentityServiceServer{db: db}
}
func (s *IdentityServiceServer) Create(ctx context.Context, req *horus.Identity) (*horus.Identity, error) {
	q := s.db.Identity.Create()
	q.SetKind(req.Kind)
	q.SetVerifier(req.Verifier)
	q.SetName(req.Name)

	res, err := q.Save(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoIdentity(res), nil
}
func (s *IdentityServiceServer) Delete(ctx context.Context, req *horus.DeleteIdentityRequest) (*emptypb.Empty, error) {
	q := s.db.Identity.Delete()
	if v, err := uuid.FromBytes(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		q.Where(identity.IDEQ(v))
	}

	_, err := q.Exec(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return &emptypb.Empty{}, nil
}
func (s *IdentityServiceServer) Get(ctx context.Context, req *horus.GetIdentityRequest) (*horus.Identity, error) {
	q := s.db.Identity.Query()
	if v, err := uuid.FromBytes(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		q.Where(identity.IDEQ(v))
	}
	q.WithOwner(func(q *ent.UserQuery) { q.Select(identity.FieldID) })

	res, err := q.Only(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoIdentity(res), nil
}
func (s *IdentityServiceServer) Update(ctx context.Context, req *horus.UpdateIdentityRequest) (*horus.Identity, error) {
	id, err := uuid.FromBytes(req.GetId())
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err.Error())
	}

	q := s.db.Identity.UpdateOneID(id)
	if v := req.Verifier; v != nil {
		q.SetVerifier(*v)
	}
	if v := req.Name; v != nil {
		q.SetName(*v)
	}

	res, err := q.Save(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoIdentity(res), nil
}
func ToProtoIdentity(v *ent.Identity) *horus.Identity {
	m := &horus.Identity{}
	m.Id = v.ID[:]
	m.DateCreated = timestamppb.New(v.DateCreated)
	m.Kind = v.Kind
	m.Verifier = v.Verifier
	m.Name = v.Name
	if v := v.Edges.Owner; v != nil {
		m.Owner = &horus.User{Id: v.ID[:]}
	}
	return m
}
