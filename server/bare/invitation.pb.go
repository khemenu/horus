// Code generated by "protoc-gen-entpb". DO NOT EDIT

package bare

import (
	context "context"
	uuid "github.com/google/uuid"
	runtime "github.com/lesomnus/entpb/cmd/protoc-gen-entpb/runtime"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	horus "khepri.dev/horus"
	ent "khepri.dev/horus/ent"
	invitation "khepri.dev/horus/ent/invitation"
)

type InvitationServiceServer struct {
	db *ent.Client
	horus.UnimplementedInvitationServiceServer
}

func NewInvitationServiceServer(db *ent.Client) *InvitationServiceServer {
	return &InvitationServiceServer{db: db}
}
func (s *InvitationServiceServer) Create(ctx context.Context, req *horus.CreateInvitationRequest) (*horus.Invitation, error) {
	q := s.db.Invitation.Create()
	q.SetInvitee(req.GetInvitee())
	q.SetType(req.GetType())
	if v := req.GetDateExpired(); v != nil {
		w := v.AsTime()
		q.SetDateExpired(w)
	}
	if v := req.GetDateAccepted(); v != nil {
		w := v.AsTime()
		q.SetDateAccepted(w)
	}
	if v := req.GetDateDeclined(); v != nil {
		w := v.AsTime()
		q.SetDateDeclined(w)
	}
	if v := req.GetDateCanceled(); v != nil {
		w := v.AsTime()
		q.SetDateCanceled(w)
	}
	if v := req.GetSilo().GetId(); v == nil {
		return nil, status.Errorf(codes.InvalidArgument, "field \"silo\" not provided")
	} else {
		if w, err := uuid.FromBytes(v); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "silo: %s", err)
		} else {
			q.SetSiloID(w)
		}
	}
	if v := req.GetInviter().GetId(); v == nil {
		return nil, status.Errorf(codes.InvalidArgument, "field \"inviter\" not provided")
	} else {
		if w, err := uuid.FromBytes(v); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "inviter: %s", err)
		} else {
			q.SetInviterID(w)
		}
	}

	res, err := q.Save(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoInvitation(res), nil
}
func (s *InvitationServiceServer) Delete(ctx context.Context, req *horus.DeleteInvitationRequest) (*emptypb.Empty, error) {
	q := s.db.Invitation.Delete()
	if v, err := uuid.FromBytes(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		q.Where(invitation.IDEQ(v))
	}

	_, err := q.Exec(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return &emptypb.Empty{}, nil
}
func (s *InvitationServiceServer) Get(ctx context.Context, req *horus.GetInvitationRequest) (*horus.Invitation, error) {
	q := s.db.Invitation.Query()
	if v, err := uuid.FromBytes(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		q.Where(invitation.IDEQ(v))
	}
	q.WithSilo(func(q *ent.SiloQuery) { q.Select(invitation.FieldID) })
	q.WithInviter(func(q *ent.AccountQuery) { q.Select(invitation.FieldID) })

	res, err := q.Only(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoInvitation(res), nil
}
func (s *InvitationServiceServer) Update(ctx context.Context, req *horus.UpdateInvitationRequest) (*horus.Invitation, error) {
	id, err := uuid.FromBytes(req.GetId())
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	}

	q := s.db.Invitation.UpdateOneID(id)
	if v := req.DateExpired; v != nil {
		w := v.AsTime()
		q.SetDateExpired(w)
	}
	if v := req.DateAccepted; v != nil {
		w := v.AsTime()
		q.SetDateAccepted(w)
	}
	if v := req.DateDeclined; v != nil {
		w := v.AsTime()
		q.SetDateDeclined(w)
	}
	if v := req.DateCanceled; v != nil {
		w := v.AsTime()
		q.SetDateCanceled(w)
	}

	res, err := q.Save(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoInvitation(res), nil
}
func ToProtoInvitation(v *ent.Invitation) *horus.Invitation {
	m := &horus.Invitation{}
	m.Id = v.ID[:]
	m.DateCreated = timestamppb.New(v.DateCreated)
	m.Invitee = v.Invitee
	m.Type = v.Type
	m.DateExpired = timestamppb.New(v.DateExpired)
	if v.DateAccepted != nil {
		m.DateAccepted = timestamppb.New(*v.DateAccepted)
	}
	if v.DateDeclined != nil {
		m.DateDeclined = timestamppb.New(*v.DateDeclined)
	}
	if v.DateCanceled != nil {
		m.DateCanceled = timestamppb.New(*v.DateCanceled)
	}
	if v := v.Edges.Silo; v != nil {
		m.Silo = &horus.Silo{Id: v.ID[:]}
	}
	if v := v.Edges.Inviter; v != nil {
		m.Inviter = &horus.Account{Id: v.ID[:]}
	}
	return m
}
