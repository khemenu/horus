// Code generated by "protoc-gen-entpb". DO NOT EDIT

package bare

import (
	context "context"
	uuid "github.com/google/uuid"
	runtime "github.com/lesomnus/entpb/cmd/protoc-gen-entpb/runtime"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	horus "khepri.dev/horus"
	ent "khepri.dev/horus/ent"
	account "khepri.dev/horus/ent/account"
)

type AccountServiceServer struct {
	db *ent.Client
	horus.UnimplementedAccountServiceServer
}

func NewAccountServiceServer(db *ent.Client) *AccountServiceServer {
	return &AccountServiceServer{db: db}
}
func (s *AccountServiceServer) Create(ctx context.Context, req *horus.CreateAccountRequest) (*horus.Account, error) {
	q := s.db.Account.Create()
	if v := req.Alias; v != nil {
		q.SetAlias(*v)
	}
	if v := req.Name; v != nil {
		q.SetName(*v)
	}
	if v := req.Description; v != nil {
		q.SetDescription(*v)
	}
	q.SetRole(toEntRole(req.GetRole()))
	if v := req.GetOwner().GetId(); v == nil {
		return nil, status.Errorf(codes.InvalidArgument, "field \"owner\" not provided")
	} else {
		if w, err := uuid.FromBytes(v); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "owner: %s", err)
		} else {
			q.SetOwnerID(w)
		}
	}
	if v := req.GetSilo().GetId(); v == nil {
		return nil, status.Errorf(codes.InvalidArgument, "field \"silo\" not provided")
	} else {
		if w, err := uuid.FromBytes(v); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "silo: %s", err)
		} else {
			q.SetSiloID(w)
		}
	}

	res, err := q.Save(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoAccount(res), nil
}
func (s *AccountServiceServer) Delete(ctx context.Context, req *horus.DeleteAccountRequest) (*emptypb.Empty, error) {
	q := s.db.Account.Delete()
	if v, err := uuid.FromBytes(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		q.Where(account.IDEQ(v))
	}

	_, err := q.Exec(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return &emptypb.Empty{}, nil
}
func (s *AccountServiceServer) Get(ctx context.Context, req *horus.GetAccountRequest) (*horus.Account, error) {
	q := s.db.Account.Query()
	if v, err := uuid.FromBytes(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		q.Where(account.IDEQ(v))
	}
	q.WithOwner(func(q *ent.UserQuery) { q.Select(account.FieldID) })
	q.WithSilo(func(q *ent.SiloQuery) { q.Select(account.FieldID) })
	q.WithMemberships(func(q *ent.MembershipQuery) { q.Select(account.FieldID) })

	res, err := q.Only(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoAccount(res), nil
}
func (s *AccountServiceServer) Update(ctx context.Context, req *horus.UpdateAccountRequest) (*horus.Account, error) {
	id, err := uuid.FromBytes(req.GetId())
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	}

	q := s.db.Account.UpdateOneID(id)
	if v := req.Alias; v != nil {
		q.SetAlias(*v)
	}
	if v := req.Name; v != nil {
		q.SetName(*v)
	}
	if v := req.Description; v != nil {
		q.SetDescription(*v)
	}
	if v := req.Role; v != nil {
		q.SetRole(toEntRole(*v))
	}

	res, err := q.Save(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoAccount(res), nil
}
func ToProtoAccount(v *ent.Account) *horus.Account {
	m := &horus.Account{}
	m.Id = v.ID[:]
	m.DateCreated = timestamppb.New(v.DateCreated)
	m.Alias = v.Alias
	m.Name = v.Name
	m.Description = v.Description
	m.Role = toPbRole(v.Role)
	if v := v.Edges.Owner; v != nil {
		m.Owner = &horus.User{Id: v.ID[:]}
	}
	if v := v.Edges.Silo; v != nil {
		m.Silo = &horus.Silo{Id: v.ID[:]}
	}
	for _, v := range v.Edges.Memberships {
		m.Memberships = append(m.Memberships, &horus.Membership{Id: v.ID[:]})
	}
	return m
}
