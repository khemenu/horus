// Code generated by "protoc-gen-entpb". DO NOT EDIT

package bare

import (
	context "context"
	uuid "github.com/google/uuid"
	runtime "github.com/lesomnus/entpb/cmd/protoc-gen-entpb/runtime"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	horus "khepri.dev/horus"
	ent "khepri.dev/horus/ent"
	membership "khepri.dev/horus/ent/membership"
)

type MembershipServiceServer struct {
	db *ent.Client
	horus.UnimplementedMembershipServiceServer
}

func NewMembershipServiceServer(db *ent.Client) *MembershipServiceServer {
	return &MembershipServiceServer{db: db}
}
func (s *MembershipServiceServer) Create(ctx context.Context, req *horus.CreateMembershipRequest) (*horus.Membership, error) {
	q := s.db.Membership.Create()
	q.SetRole(toEntRole(req.GetRole()))
	if v := req.GetAccount().GetId(); v == nil {
		return nil, status.Errorf(codes.InvalidArgument, "field \"account\" not provided")
	} else {
		if w, err := uuid.FromBytes(v); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "account: %s", err)
		} else {
			q.SetAccountID(w)
		}
	}
	if v := req.GetTeam().GetId(); v == nil {
		return nil, status.Errorf(codes.InvalidArgument, "field \"team\" not provided")
	} else {
		if w, err := uuid.FromBytes(v); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "team: %s", err)
		} else {
			q.SetTeamID(w)
		}
	}

	res, err := q.Save(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoMembership(res), nil
}
func (s *MembershipServiceServer) Delete(ctx context.Context, req *horus.DeleteMembershipRequest) (*emptypb.Empty, error) {
	q := s.db.Membership.Delete()
	if v, err := uuid.FromBytes(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		q.Where(membership.IDEQ(v))
	}

	_, err := q.Exec(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return &emptypb.Empty{}, nil
}
func (s *MembershipServiceServer) Get(ctx context.Context, req *horus.GetMembershipRequest) (*horus.Membership, error) {
	q := s.db.Membership.Query()
	if v, err := uuid.FromBytes(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		q.Where(membership.IDEQ(v))
	}
	q.WithAccount(func(q *ent.AccountQuery) { q.Select(membership.FieldID) })
	q.WithTeam(func(q *ent.TeamQuery) { q.Select(membership.FieldID) })

	res, err := q.Only(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoMembership(res), nil
}
func (s *MembershipServiceServer) Update(ctx context.Context, req *horus.UpdateMembershipRequest) (*horus.Membership, error) {
	id, err := uuid.FromBytes(req.GetId())
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	}

	q := s.db.Membership.UpdateOneID(id)
	if v := req.Role; v != nil {
		q.SetRole(toEntRole(*v))
	}

	res, err := q.Save(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoMembership(res), nil
}
func ToProtoMembership(v *ent.Membership) *horus.Membership {
	m := &horus.Membership{}
	m.Id = v.ID[:]
	m.DateCreated = timestamppb.New(v.DateCreated)
	m.Role = toPbRole(v.Role)
	if v := v.Edges.Account; v != nil {
		m.Account = ToProtoAccount(v)
	}
	if v := v.Edges.Team; v != nil {
		m.Team = ToProtoTeam(v)
	}
	return m
}
