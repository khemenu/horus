// Code generated by "protoc-gen-entpb". DO NOT EDIT

package bare

import (
	context "context"
	uuid "github.com/google/uuid"
	runtime "github.com/lesomnus/entpb/cmd/protoc-gen-entpb/runtime"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	horus "khepri.dev/horus"
	ent "khepri.dev/horus/ent"
	user "khepri.dev/horus/ent/user"
)

type UserServiceServer struct {
	db *ent.Client
	horus.UnimplementedUserServiceServer
}

func NewUserServiceServer(db *ent.Client) *UserServiceServer {
	return &UserServiceServer{db: db}
}
func (s *UserServiceServer) Create(ctx context.Context, req *horus.CreateUserRequest) (*horus.User, error) {
	q := s.db.User.Create()
	if v := req.Alias; v != nil {
		q.SetAlias(*v)
	}
	if v := req.GetParent(); v != nil {
		if w, err := uuid.FromBytes(v.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "parent: %s", err)
		} else {
			q.SetParentID(w)
		}
	}

	res, err := q.Save(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoUser(res), nil
}
func (s *UserServiceServer) Delete(ctx context.Context, req *horus.DeleteUserRequest) (*emptypb.Empty, error) {
	q := s.db.User.Delete()
	switch t := req.GetKey().(type) {
	case *horus.DeleteUserRequest_Id:
		if v, err := uuid.FromBytes(t.Id); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
		} else {
			q.Where(user.IDEQ(v))
		}
	case *horus.DeleteUserRequest_Alias:
		q.Where(user.AliasEQ(t.Alias))
	default:
		return nil, status.Errorf(codes.InvalidArgument, "key not provided")
	}

	_, err := q.Exec(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return &emptypb.Empty{}, nil
}
func (s *UserServiceServer) Get(ctx context.Context, req *horus.GetUserRequest) (*horus.User, error) {
	q := s.db.User.Query()
	switch t := req.GetKey().(type) {
	case *horus.GetUserRequest_Id:
		if v, err := uuid.FromBytes(t.Id); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
		} else {
			q.Where(user.IDEQ(v))
		}
	case *horus.GetUserRequest_Alias:
		q.Where(user.AliasEQ(t.Alias))
	default:
		return nil, status.Errorf(codes.InvalidArgument, "key not provided")
	}

	q.WithParent(func(q *ent.UserQuery) { q.Select(user.FieldID) })
	q.WithIdentities(func(q *ent.IdentityQuery) { q.Select(user.FieldID) })
	q.WithAccounts(func(q *ent.AccountQuery) { q.Select(user.FieldID) })
	q.WithChildren(func(q *ent.UserQuery) { q.Select(user.FieldID) })

	res, err := q.Only(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoUser(res), nil
}
func (s *UserServiceServer) Update(ctx context.Context, req *horus.UpdateUserRequest) (*horus.User, error) {
	id, err := uuid.FromBytes(req.GetId())
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	}

	q := s.db.User.UpdateOneID(id)
	if v := req.Alias; v != nil {
		q.SetAlias(*v)
	}
	if v := req.Parent; v != nil {
		if w, err := uuid.FromBytes(v.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "parent: %s", err)
		} else {
			q.SetParentID(w)
		}
	}

	res, err := q.Save(ctx)
	if err != nil {
		return nil, runtime.EntErrorToStatus(err)
	}

	return ToProtoUser(res), nil
}
func ToProtoUser(v *ent.User) *horus.User {
	m := &horus.User{}
	m.Id = v.ID[:]
	m.DateCreated = timestamppb.New(v.DateCreated)
	m.Alias = v.Alias
	if v := v.Edges.Parent; v != nil {
		m.Parent = &horus.User{Id: v.ID[:]}
	}
	for _, v := range v.Edges.Identities {
		m.Identities = append(m.Identities, &horus.Identity{Id: v.ID[:]})
	}
	for _, v := range v.Edges.Accounts {
		m.Accounts = append(m.Accounts, &horus.Account{Id: v.ID[:]})
	}
	for _, v := range v.Edges.Children {
		m.Children = append(m.Children, &horus.User{Id: v.ID[:]})
	}
	return m
}
