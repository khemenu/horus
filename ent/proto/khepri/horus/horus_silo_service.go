// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package horus

import (
	context "context"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	uuid "github.com/google/uuid"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	ent "khepri.dev/horus/ent"
	silo "khepri.dev/horus/ent/silo"
)

// SiloService implements SiloServiceServer
type SiloService struct {
	client *ent.Client
	UnimplementedSiloServiceServer
}

// NewSiloService returns a new SiloService
func NewSiloService(client *ent.Client) *SiloService {
	return &SiloService{
		client: client,
	}
}

// toProtoSilo transforms the ent type to the pb type
func toProtoSilo(e *ent.Silo) (*Silo, error) {
	v := &Silo{}
	alias := e.Alias
	v.Alias = alias
	created_date := timestamppb.New(e.CreatedDate)
	v.CreatedDate = created_date
	description := e.Description
	v.Description = description
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	name := e.Name
	v.Name = name
	return v, nil
}

// Create implements SiloServiceServer.Create
func (svc *SiloService) Create(ctx context.Context, req *CreateSiloRequest) (*Silo, error) {
	silo := req.GetSilo()
	m, err := svc.createBuilder(silo)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoSilo(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements SiloServiceServer.Get
func (svc *SiloService) Get(ctx context.Context, req *GetSiloRequest) (*Silo, error) {
	var (
		err error
		get *ent.Silo
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetSiloRequest_VIEW_UNSPECIFIED, GetSiloRequest_BASIC:
		get, err = svc.client.Silo.Get(ctx, id)
	case GetSiloRequest_WITH_EDGE_IDS:
		get, err = svc.client.Silo.Query().
			Where(silo.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoSilo(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements SiloServiceServer.Update
func (svc *SiloService) Update(ctx context.Context, req *UpdateSiloRequest) (*Silo, error) {
	silo := req.GetSilo()
	var siloID uuid.UUID
	if err := (&siloID).UnmarshalBinary(silo.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.Silo.UpdateOneID(siloID)
	siloAlias := silo.GetAlias()
	m.SetAlias(siloAlias)
	siloDescription := silo.GetDescription()
	m.SetDescription(siloDescription)
	siloName := silo.GetName()
	m.SetName(siloName)

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoSilo(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements SiloServiceServer.Delete
func (svc *SiloService) Delete(ctx context.Context, req *DeleteSiloRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.Silo.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *SiloService) createBuilder(silo *Silo) (*ent.SiloCreate, error) {
	m := svc.client.Silo.Create()
	siloAlias := silo.GetAlias()
	m.SetAlias(siloAlias)
	siloCreatedDate := runtime.ExtractTime(silo.GetCreatedDate())
	m.SetCreatedDate(siloCreatedDate)
	siloDescription := silo.GetDescription()
	m.SetDescription(siloDescription)
	siloName := silo.GetName()
	m.SetName(siloName)
	return m, nil
}
