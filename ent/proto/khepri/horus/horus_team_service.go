// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package horus

import (
	context "context"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	uuid "github.com/google/uuid"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	ent "khepri.dev/horus/ent"
	silo "khepri.dev/horus/ent/silo"
	team "khepri.dev/horus/ent/team"
	regexp "regexp"
	strings "strings"
)

// TeamService implements TeamServiceServer
type TeamService struct {
	client *ent.Client
	UnimplementedTeamServiceServer
}

// NewTeamService returns a new TeamService
func NewTeamService(client *ent.Client) *TeamService {
	return &TeamService{
		client: client,
	}
}

var protoIdentNormalizeRegexpTeam_InterVisibility = regexp.MustCompile(`[^a-zA-Z0-9_]+`)

func protoIdentNormalizeTeam_InterVisibility(e string) string {
	return protoIdentNormalizeRegexpTeam_InterVisibility.ReplaceAllString(e, "_")
}

func toProtoTeam_InterVisibility(e team.InterVisibility) Team_InterVisibility {
	if v, ok := Team_InterVisibility_value[strings.ToUpper("INTER_VISIBILITY_"+protoIdentNormalizeTeam_InterVisibility(string(e)))]; ok {
		return Team_InterVisibility(v)
	}
	return Team_InterVisibility(0)
}

func toEntTeam_InterVisibility(e Team_InterVisibility) team.InterVisibility {
	if v, ok := Team_InterVisibility_name[int32(e)]; ok {
		entVal := map[string]string{
			"INTER_VISIBILITY_PRIVATE": "PRIVATE",
			"INTER_VISIBILITY_PUBLIC":  "PUBLIC",
		}[v]
		return team.InterVisibility(entVal)
	}
	return ""
}

var protoIdentNormalizeRegexpTeam_IntraVisibility = regexp.MustCompile(`[^a-zA-Z0-9_]+`)

func protoIdentNormalizeTeam_IntraVisibility(e string) string {
	return protoIdentNormalizeRegexpTeam_IntraVisibility.ReplaceAllString(e, "_")
}

func toProtoTeam_IntraVisibility(e team.IntraVisibility) Team_IntraVisibility {
	if v, ok := Team_IntraVisibility_value[strings.ToUpper("INTRA_VISIBILITY_"+protoIdentNormalizeTeam_IntraVisibility(string(e)))]; ok {
		return Team_IntraVisibility(v)
	}
	return Team_IntraVisibility(0)
}

func toEntTeam_IntraVisibility(e Team_IntraVisibility) team.IntraVisibility {
	if v, ok := Team_IntraVisibility_name[int32(e)]; ok {
		entVal := map[string]string{
			"INTRA_VISIBILITY_PRIVATE": "PRIVATE",
			"INTRA_VISIBILITY_PUBLIC":  "PUBLIC",
		}[v]
		return team.IntraVisibility(entVal)
	}
	return ""
}

// toProtoTeam transforms the ent type to the pb type
func toProtoTeam(e *ent.Team) (*Team, error) {
	v := &Team{}
	alias := e.Alias
	v.Alias = alias
	created_date := timestamppb.New(e.CreatedDate)
	v.CreatedDate = created_date
	description := e.Description
	v.Description = description
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	inter_visibility := toProtoTeam_InterVisibility(e.InterVisibility)
	v.InterVisibility = inter_visibility
	intra_visibility := toProtoTeam_IntraVisibility(e.IntraVisibility)
	v.IntraVisibility = intra_visibility
	name := e.Name
	v.Name = name
	if edg := e.Edges.Silo; edg != nil {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Silo = &Silo{
			Id: id,
		}
	}
	return v, nil
}

// Create implements TeamServiceServer.Create
func (svc *TeamService) Create(ctx context.Context, req *CreateTeamRequest) (*Team, error) {
	team := req.GetTeam()
	m, err := svc.createBuilder(team)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoTeam(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements TeamServiceServer.Get
func (svc *TeamService) Get(ctx context.Context, req *GetTeamRequest) (*Team, error) {
	var (
		err error
		get *ent.Team
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetTeamRequest_VIEW_UNSPECIFIED, GetTeamRequest_BASIC:
		get, err = svc.client.Team.Get(ctx, id)
	case GetTeamRequest_WITH_EDGE_IDS:
		get, err = svc.client.Team.Query().
			Where(team.ID(id)).
			WithSilo(func(query *ent.SiloQuery) {
				query.Select(silo.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoTeam(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements TeamServiceServer.Update
func (svc *TeamService) Update(ctx context.Context, req *UpdateTeamRequest) (*Team, error) {
	team := req.GetTeam()
	var teamID uuid.UUID
	if err := (&teamID).UnmarshalBinary(team.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.Team.UpdateOneID(teamID)
	teamAlias := team.GetAlias()
	m.SetAlias(teamAlias)
	teamDescription := team.GetDescription()
	m.SetDescription(teamDescription)
	teamInterVisibility := toEntTeam_InterVisibility(team.GetInterVisibility())
	m.SetInterVisibility(teamInterVisibility)
	teamIntraVisibility := toEntTeam_IntraVisibility(team.GetIntraVisibility())
	m.SetIntraVisibility(teamIntraVisibility)
	teamName := team.GetName()
	m.SetName(teamName)

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoTeam(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements TeamServiceServer.Delete
func (svc *TeamService) Delete(ctx context.Context, req *DeleteTeamRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.Team.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *TeamService) createBuilder(team *Team) (*ent.TeamCreate, error) {
	m := svc.client.Team.Create()
	teamAlias := team.GetAlias()
	m.SetAlias(teamAlias)
	teamCreatedDate := runtime.ExtractTime(team.GetCreatedDate())
	m.SetCreatedDate(teamCreatedDate)
	teamDescription := team.GetDescription()
	m.SetDescription(teamDescription)
	teamInterVisibility := toEntTeam_InterVisibility(team.GetInterVisibility())
	m.SetInterVisibility(teamInterVisibility)
	teamIntraVisibility := toEntTeam_IntraVisibility(team.GetIntraVisibility())
	m.SetIntraVisibility(teamIntraVisibility)
	teamName := team.GetName()
	m.SetName(teamName)
	if team.GetSilo() != nil {
		var teamSilo uuid.UUID
		if err := (&teamSilo).UnmarshalBinary(team.GetSilo().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetSiloID(teamSilo)
	}
	return m, nil
}
