// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"khepri.dev/horus/ent/invitation"
	"khepri.dev/horus/ent/predicate"
)

// InvitationUpdate is the builder for updating Invitation entities.
type InvitationUpdate struct {
	config
	hooks    []Hook
	mutation *InvitationMutation
}

// Where appends a list predicates to the InvitationUpdate builder.
func (iu *InvitationUpdate) Where(ps ...predicate.Invitation) *InvitationUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetExpiredDate sets the "expired_date" field.
func (iu *InvitationUpdate) SetExpiredDate(t time.Time) *InvitationUpdate {
	iu.mutation.SetExpiredDate(t)
	return iu
}

// SetNillableExpiredDate sets the "expired_date" field if the given value is not nil.
func (iu *InvitationUpdate) SetNillableExpiredDate(t *time.Time) *InvitationUpdate {
	if t != nil {
		iu.SetExpiredDate(*t)
	}
	return iu
}

// SetAcceptedDate sets the "accepted_date" field.
func (iu *InvitationUpdate) SetAcceptedDate(t time.Time) *InvitationUpdate {
	iu.mutation.SetAcceptedDate(t)
	return iu
}

// SetNillableAcceptedDate sets the "accepted_date" field if the given value is not nil.
func (iu *InvitationUpdate) SetNillableAcceptedDate(t *time.Time) *InvitationUpdate {
	if t != nil {
		iu.SetAcceptedDate(*t)
	}
	return iu
}

// SetDeclinedDate sets the "declined_date" field.
func (iu *InvitationUpdate) SetDeclinedDate(t time.Time) *InvitationUpdate {
	iu.mutation.SetDeclinedDate(t)
	return iu
}

// SetNillableDeclinedDate sets the "declined_date" field if the given value is not nil.
func (iu *InvitationUpdate) SetNillableDeclinedDate(t *time.Time) *InvitationUpdate {
	if t != nil {
		iu.SetDeclinedDate(*t)
	}
	return iu
}

// SetCanceledDate sets the "canceled_date" field.
func (iu *InvitationUpdate) SetCanceledDate(t time.Time) *InvitationUpdate {
	iu.mutation.SetCanceledDate(t)
	return iu
}

// SetNillableCanceledDate sets the "canceled_date" field if the given value is not nil.
func (iu *InvitationUpdate) SetNillableCanceledDate(t *time.Time) *InvitationUpdate {
	if t != nil {
		iu.SetCanceledDate(*t)
	}
	return iu
}

// Mutation returns the InvitationMutation object of the builder.
func (iu *InvitationUpdate) Mutation() *InvitationMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InvitationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InvitationUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InvitationUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InvitationUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InvitationUpdate) check() error {
	if _, ok := iu.mutation.SiloID(); iu.mutation.SiloCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invitation.silo"`)
	}
	if _, ok := iu.mutation.InviterID(); iu.mutation.InviterCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invitation.inviter"`)
	}
	return nil
}

func (iu *InvitationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invitation.Table, invitation.Columns, sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.ExpiredDate(); ok {
		_spec.SetField(invitation.FieldExpiredDate, field.TypeTime, value)
	}
	if value, ok := iu.mutation.AcceptedDate(); ok {
		_spec.SetField(invitation.FieldAcceptedDate, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DeclinedDate(); ok {
		_spec.SetField(invitation.FieldDeclinedDate, field.TypeTime, value)
	}
	if value, ok := iu.mutation.CanceledDate(); ok {
		_spec.SetField(invitation.FieldCanceledDate, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InvitationUpdateOne is the builder for updating a single Invitation entity.
type InvitationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvitationMutation
}

// SetExpiredDate sets the "expired_date" field.
func (iuo *InvitationUpdateOne) SetExpiredDate(t time.Time) *InvitationUpdateOne {
	iuo.mutation.SetExpiredDate(t)
	return iuo
}

// SetNillableExpiredDate sets the "expired_date" field if the given value is not nil.
func (iuo *InvitationUpdateOne) SetNillableExpiredDate(t *time.Time) *InvitationUpdateOne {
	if t != nil {
		iuo.SetExpiredDate(*t)
	}
	return iuo
}

// SetAcceptedDate sets the "accepted_date" field.
func (iuo *InvitationUpdateOne) SetAcceptedDate(t time.Time) *InvitationUpdateOne {
	iuo.mutation.SetAcceptedDate(t)
	return iuo
}

// SetNillableAcceptedDate sets the "accepted_date" field if the given value is not nil.
func (iuo *InvitationUpdateOne) SetNillableAcceptedDate(t *time.Time) *InvitationUpdateOne {
	if t != nil {
		iuo.SetAcceptedDate(*t)
	}
	return iuo
}

// SetDeclinedDate sets the "declined_date" field.
func (iuo *InvitationUpdateOne) SetDeclinedDate(t time.Time) *InvitationUpdateOne {
	iuo.mutation.SetDeclinedDate(t)
	return iuo
}

// SetNillableDeclinedDate sets the "declined_date" field if the given value is not nil.
func (iuo *InvitationUpdateOne) SetNillableDeclinedDate(t *time.Time) *InvitationUpdateOne {
	if t != nil {
		iuo.SetDeclinedDate(*t)
	}
	return iuo
}

// SetCanceledDate sets the "canceled_date" field.
func (iuo *InvitationUpdateOne) SetCanceledDate(t time.Time) *InvitationUpdateOne {
	iuo.mutation.SetCanceledDate(t)
	return iuo
}

// SetNillableCanceledDate sets the "canceled_date" field if the given value is not nil.
func (iuo *InvitationUpdateOne) SetNillableCanceledDate(t *time.Time) *InvitationUpdateOne {
	if t != nil {
		iuo.SetCanceledDate(*t)
	}
	return iuo
}

// Mutation returns the InvitationMutation object of the builder.
func (iuo *InvitationUpdateOne) Mutation() *InvitationMutation {
	return iuo.mutation
}

// Where appends a list predicates to the InvitationUpdate builder.
func (iuo *InvitationUpdateOne) Where(ps ...predicate.Invitation) *InvitationUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InvitationUpdateOne) Select(field string, fields ...string) *InvitationUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Invitation entity.
func (iuo *InvitationUpdateOne) Save(ctx context.Context) (*Invitation, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InvitationUpdateOne) SaveX(ctx context.Context) *Invitation {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InvitationUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InvitationUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InvitationUpdateOne) check() error {
	if _, ok := iuo.mutation.SiloID(); iuo.mutation.SiloCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invitation.silo"`)
	}
	if _, ok := iuo.mutation.InviterID(); iuo.mutation.InviterCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invitation.inviter"`)
	}
	return nil
}

func (iuo *InvitationUpdateOne) sqlSave(ctx context.Context) (_node *Invitation, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invitation.Table, invitation.Columns, sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invitation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invitation.FieldID)
		for _, f := range fields {
			if !invitation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invitation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.ExpiredDate(); ok {
		_spec.SetField(invitation.FieldExpiredDate, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.AcceptedDate(); ok {
		_spec.SetField(invitation.FieldAcceptedDate, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DeclinedDate(); ok {
		_spec.SetField(invitation.FieldDeclinedDate, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.CanceledDate(); ok {
		_spec.SetField(invitation.FieldCanceledDate, field.TypeTime, value)
	}
	_node = &Invitation{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
