// Code generated by ent, DO NOT EDIT.

package invitation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"khepri.dev/horus/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldID, id))
}

// Invitee applies equality check predicate on the "invitee" field. It's identical to InviteeEQ.
func Invitee(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldInvitee, v))
}

// CreatedDate applies equality check predicate on the "created_date" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldCreatedDate, v))
}

// ExpiredDate applies equality check predicate on the "expired_date" field. It's identical to ExpiredDateEQ.
func ExpiredDate(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldExpiredDate, v))
}

// AcceptedDate applies equality check predicate on the "accepted_date" field. It's identical to AcceptedDateEQ.
func AcceptedDate(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldAcceptedDate, v))
}

// DeclinedDate applies equality check predicate on the "declined_date" field. It's identical to DeclinedDateEQ.
func DeclinedDate(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldDeclinedDate, v))
}

// CanceledDate applies equality check predicate on the "canceled_date" field. It's identical to CanceledDateEQ.
func CanceledDate(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldCanceledDate, v))
}

// InviteeEQ applies the EQ predicate on the "invitee" field.
func InviteeEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldInvitee, v))
}

// InviteeNEQ applies the NEQ predicate on the "invitee" field.
func InviteeNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldInvitee, v))
}

// InviteeIn applies the In predicate on the "invitee" field.
func InviteeIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldInvitee, vs...))
}

// InviteeNotIn applies the NotIn predicate on the "invitee" field.
func InviteeNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldInvitee, vs...))
}

// InviteeGT applies the GT predicate on the "invitee" field.
func InviteeGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldInvitee, v))
}

// InviteeGTE applies the GTE predicate on the "invitee" field.
func InviteeGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldInvitee, v))
}

// InviteeLT applies the LT predicate on the "invitee" field.
func InviteeLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldInvitee, v))
}

// InviteeLTE applies the LTE predicate on the "invitee" field.
func InviteeLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldInvitee, v))
}

// InviteeContains applies the Contains predicate on the "invitee" field.
func InviteeContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldInvitee, v))
}

// InviteeHasPrefix applies the HasPrefix predicate on the "invitee" field.
func InviteeHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldInvitee, v))
}

// InviteeHasSuffix applies the HasSuffix predicate on the "invitee" field.
func InviteeHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldInvitee, v))
}

// InviteeEqualFold applies the EqualFold predicate on the "invitee" field.
func InviteeEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldInvitee, v))
}

// InviteeContainsFold applies the ContainsFold predicate on the "invitee" field.
func InviteeContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldInvitee, v))
}

// CreatedDateEQ applies the EQ predicate on the "created_date" field.
func CreatedDateEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldCreatedDate, v))
}

// CreatedDateNEQ applies the NEQ predicate on the "created_date" field.
func CreatedDateNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldCreatedDate, v))
}

// CreatedDateIn applies the In predicate on the "created_date" field.
func CreatedDateIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldCreatedDate, vs...))
}

// CreatedDateNotIn applies the NotIn predicate on the "created_date" field.
func CreatedDateNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldCreatedDate, vs...))
}

// CreatedDateGT applies the GT predicate on the "created_date" field.
func CreatedDateGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldCreatedDate, v))
}

// CreatedDateGTE applies the GTE predicate on the "created_date" field.
func CreatedDateGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldCreatedDate, v))
}

// CreatedDateLT applies the LT predicate on the "created_date" field.
func CreatedDateLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldCreatedDate, v))
}

// CreatedDateLTE applies the LTE predicate on the "created_date" field.
func CreatedDateLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldCreatedDate, v))
}

// ExpiredDateEQ applies the EQ predicate on the "expired_date" field.
func ExpiredDateEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldExpiredDate, v))
}

// ExpiredDateNEQ applies the NEQ predicate on the "expired_date" field.
func ExpiredDateNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldExpiredDate, v))
}

// ExpiredDateIn applies the In predicate on the "expired_date" field.
func ExpiredDateIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldExpiredDate, vs...))
}

// ExpiredDateNotIn applies the NotIn predicate on the "expired_date" field.
func ExpiredDateNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldExpiredDate, vs...))
}

// ExpiredDateGT applies the GT predicate on the "expired_date" field.
func ExpiredDateGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldExpiredDate, v))
}

// ExpiredDateGTE applies the GTE predicate on the "expired_date" field.
func ExpiredDateGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldExpiredDate, v))
}

// ExpiredDateLT applies the LT predicate on the "expired_date" field.
func ExpiredDateLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldExpiredDate, v))
}

// ExpiredDateLTE applies the LTE predicate on the "expired_date" field.
func ExpiredDateLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldExpiredDate, v))
}

// AcceptedDateEQ applies the EQ predicate on the "accepted_date" field.
func AcceptedDateEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldAcceptedDate, v))
}

// AcceptedDateNEQ applies the NEQ predicate on the "accepted_date" field.
func AcceptedDateNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldAcceptedDate, v))
}

// AcceptedDateIn applies the In predicate on the "accepted_date" field.
func AcceptedDateIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldAcceptedDate, vs...))
}

// AcceptedDateNotIn applies the NotIn predicate on the "accepted_date" field.
func AcceptedDateNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldAcceptedDate, vs...))
}

// AcceptedDateGT applies the GT predicate on the "accepted_date" field.
func AcceptedDateGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldAcceptedDate, v))
}

// AcceptedDateGTE applies the GTE predicate on the "accepted_date" field.
func AcceptedDateGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldAcceptedDate, v))
}

// AcceptedDateLT applies the LT predicate on the "accepted_date" field.
func AcceptedDateLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldAcceptedDate, v))
}

// AcceptedDateLTE applies the LTE predicate on the "accepted_date" field.
func AcceptedDateLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldAcceptedDate, v))
}

// DeclinedDateEQ applies the EQ predicate on the "declined_date" field.
func DeclinedDateEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldDeclinedDate, v))
}

// DeclinedDateNEQ applies the NEQ predicate on the "declined_date" field.
func DeclinedDateNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldDeclinedDate, v))
}

// DeclinedDateIn applies the In predicate on the "declined_date" field.
func DeclinedDateIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldDeclinedDate, vs...))
}

// DeclinedDateNotIn applies the NotIn predicate on the "declined_date" field.
func DeclinedDateNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldDeclinedDate, vs...))
}

// DeclinedDateGT applies the GT predicate on the "declined_date" field.
func DeclinedDateGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldDeclinedDate, v))
}

// DeclinedDateGTE applies the GTE predicate on the "declined_date" field.
func DeclinedDateGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldDeclinedDate, v))
}

// DeclinedDateLT applies the LT predicate on the "declined_date" field.
func DeclinedDateLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldDeclinedDate, v))
}

// DeclinedDateLTE applies the LTE predicate on the "declined_date" field.
func DeclinedDateLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldDeclinedDate, v))
}

// CanceledDateEQ applies the EQ predicate on the "canceled_date" field.
func CanceledDateEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldCanceledDate, v))
}

// CanceledDateNEQ applies the NEQ predicate on the "canceled_date" field.
func CanceledDateNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldCanceledDate, v))
}

// CanceledDateIn applies the In predicate on the "canceled_date" field.
func CanceledDateIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldCanceledDate, vs...))
}

// CanceledDateNotIn applies the NotIn predicate on the "canceled_date" field.
func CanceledDateNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldCanceledDate, vs...))
}

// CanceledDateGT applies the GT predicate on the "canceled_date" field.
func CanceledDateGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldCanceledDate, v))
}

// CanceledDateGTE applies the GTE predicate on the "canceled_date" field.
func CanceledDateGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldCanceledDate, v))
}

// CanceledDateLT applies the LT predicate on the "canceled_date" field.
func CanceledDateLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldCanceledDate, v))
}

// CanceledDateLTE applies the LTE predicate on the "canceled_date" field.
func CanceledDateLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldCanceledDate, v))
}

// HasSilo applies the HasEdge predicate on the "silo" edge.
func HasSilo() predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SiloTable, SiloColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSiloWith applies the HasEdge predicate on the "silo" edge with a given conditions (other predicates).
func HasSiloWith(preds ...predicate.Silo) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := newSiloStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInviter applies the HasEdge predicate on the "inviter" edge.
func HasInviter() predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InviterTable, InviterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInviterWith applies the HasEdge predicate on the "inviter" edge with a given conditions (other predicates).
func HasInviterWith(preds ...predicate.Account) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := newInviterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(sql.NotPredicates(p))
}
