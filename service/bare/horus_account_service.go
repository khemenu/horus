// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package bare

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	uuid "github.com/google/uuid"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	horus "khepri.dev/horus"
	ent "khepri.dev/horus/ent"
	account "khepri.dev/horus/ent/account"
	membership "khepri.dev/horus/ent/membership"
	silo "khepri.dev/horus/ent/silo"
	user "khepri.dev/horus/ent/user"
	regexp "regexp"
	strings "strings"
)

// AccountService implements AccountServiceServer
type AccountService struct {
	client *ent.Client
	horus.UnimplementedAccountServiceServer
}

// NewAccountService returns a new AccountService
func NewAccountService(client *ent.Client) *AccountService {
	return &AccountService{
		client: client,
	}
}

var protoIdentNormalizeRegexpAccount_Role = regexp.MustCompile(`[^a-zA-Z0-9_]+`)

func protoIdentNormalizeAccount_Role(e string) string {
	return protoIdentNormalizeRegexpAccount_Role.ReplaceAllString(e, "_")
}

func toProtoAccount_Role(e account.Role) horus.Account_Role {
	if v, ok := horus.Account_Role_value[strings.ToUpper("ROLE_"+protoIdentNormalizeAccount_Role(string(e)))]; ok {
		return horus.Account_Role(v)
	}
	return horus.Account_Role(0)
}

func toEntAccount_Role(e horus.Account_Role) account.Role {
	if v, ok := horus.Account_Role_name[int32(e)]; ok {
		entVal := map[string]string{
			"ROLE_OWNER":  "OWNER",
			"ROLE_MEMBER": "MEMBER",
		}[v]
		return account.Role(entVal)
	}
	return ""
}

// toProtoAccount transforms the ent type to the pb type
func toProtoAccount(e *ent.Account) (*horus.Account, error) {
	v := &horus.Account{}
	alias := e.Alias
	v.Alias = alias
	created_date := timestamppb.New(e.CreatedDate)
	v.CreatedDate = created_date
	description := e.Description
	v.Description = description
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	name := e.Name
	v.Name = name
	role := toProtoAccount_Role(e.Role)
	v.Role = role

	for _, edg := range e.Edges.Memberships {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Memberships = append(v.Memberships, &horus.Membership{
			Id: id,
		})
	}

	if edg := e.Edges.Owner; edg != nil {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Owner = &horus.User{
			Id: id,
		}
	}

	if edg := e.Edges.Silo; edg != nil {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Silo = &horus.Silo{
			Id: id,
		}
	}
	return v, nil
}

// toProtoAccountList transforms a list of ent type to a list of pb type
func toProtoAccountList(e []*ent.Account) ([]*horus.Account, error) {
	var pbList []*horus.Account
	for _, entEntity := range e {
		pbEntity, err := toProtoAccount(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements AccountServiceServer.Create
func (svc *AccountService) Create(ctx context.Context, req *horus.CreateAccountRequest) (*horus.Account, error) {
	account := req.GetAccount()
	m, err := svc.createBuilder(account)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoAccount(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements AccountServiceServer.Get
func (svc *AccountService) Get(ctx context.Context, req *horus.GetAccountRequest) (*horus.Account, error) {

	var (
		err error
		get *ent.Account
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case horus.GetAccountRequest_VIEW_UNSPECIFIED:
		fallthrough
	case horus.GetAccountRequest_BASIC:
		get, err = svc.client.Account.Get(ctx, id)
	case horus.GetAccountRequest_WITH_EDGE_IDS:
		get, err = svc.client.Account.Query().
			Where(account.ID(id)).
			WithMemberships(func(query *ent.MembershipQuery) {
				query.Select(membership.FieldID)
			}).
			WithOwner(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			WithSilo(func(query *ent.SiloQuery) {
				query.Select(silo.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoAccount(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements AccountServiceServer.Update
func (svc *AccountService) Update(ctx context.Context, req *horus.UpdateAccountRequest) (*horus.Account, error) {
	account := req.GetAccount()
	var accountID uuid.UUID
	if err := (&accountID).UnmarshalBinary(account.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.Account.UpdateOneID(accountID)
	accountAlias := account.GetAlias()
	m.SetAlias(accountAlias)
	accountDescription := account.GetDescription()
	m.SetDescription(accountDescription)
	accountName := account.GetName()
	m.SetName(accountName)
	accountRole := toEntAccount_Role(account.GetRole())
	m.SetRole(accountRole)
	for _, item := range account.GetMemberships() {
		var memberships uuid.UUID
		if err := (&memberships).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddMembershipIDs(memberships)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoAccount(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements AccountServiceServer.Delete
func (svc *AccountService) Delete(ctx context.Context, req *horus.DeleteAccountRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.Account.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements AccountServiceServer.List
func (svc *AccountService) List(ctx context.Context, req *horus.ListAccountRequest) (*horus.ListAccountResponse, error) {

	var (
		err      error
		entList  []*ent.Account
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Account.Query().
		Order(ent.Desc(account.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(account.IDLTE(pageToken))
	}
	switch req.GetView() {
	case horus.ListAccountRequest_VIEW_UNSPECIFIED:
		fallthrough
	case horus.ListAccountRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case horus.ListAccountRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithMemberships(func(query *ent.MembershipQuery) {
				query.Select(membership.FieldID)
			}).
			WithOwner(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			WithSilo(func(query *ent.SiloQuery) {
				query.Select(silo.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoAccountList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &horus.ListAccountResponse{
			AccountList:   protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *AccountService) createBuilder(account *horus.Account) (*ent.AccountCreate, error) {
	m := svc.client.Account.Create()
	accountAlias := account.GetAlias()
	m.SetAlias(accountAlias)
	accountCreatedDate := runtime.ExtractTime(account.GetCreatedDate())
	m.SetCreatedDate(accountCreatedDate)
	accountDescription := account.GetDescription()
	m.SetDescription(accountDescription)
	accountName := account.GetName()
	m.SetName(accountName)
	accountRole := toEntAccount_Role(account.GetRole())
	m.SetRole(accountRole)
	for _, item := range account.GetMemberships() {
		var memberships uuid.UUID
		if err := (&memberships).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddMembershipIDs(memberships)
	}
	if account.GetOwner() != nil {
		var accountOwner uuid.UUID
		if err := (&accountOwner).UnmarshalBinary(account.GetOwner().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetOwnerID(accountOwner)
	}
	if account.GetSilo() != nil {
		var accountSilo uuid.UUID
		if err := (&accountSilo).UnmarshalBinary(account.GetSilo().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetSiloID(accountSilo)
	}
	return m, nil
}
