// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package bare

import (
	context "context"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	uuid "github.com/google/uuid"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	horus "khepri.dev/horus"
	ent "khepri.dev/horus/ent"
	account "khepri.dev/horus/ent/account"
	invitation "khepri.dev/horus/ent/invitation"
	silo "khepri.dev/horus/ent/silo"
)

// InvitationService implements InvitationServiceServer
type InvitationService struct {
	client *ent.Client
	horus.UnimplementedInvitationServiceServer
}

// NewInvitationService returns a new InvitationService
func NewInvitationService(client *ent.Client) *InvitationService {
	return &InvitationService{
		client: client,
	}
}

// toProtoInvitation transforms the ent type to the pb type
func toProtoInvitation(e *ent.Invitation) (*horus.Invitation, error) {
	v := &horus.Invitation{}
	if e.AcceptedDate != nil {
		accepted_date := timestamppb.New(*e.AcceptedDate)
		v.AcceptedDate = accepted_date
	}
	if e.CanceledDate != nil {
		canceled_date := timestamppb.New(*e.CanceledDate)
		v.CanceledDate = canceled_date
	}
	created_date := timestamppb.New(e.CreatedDate)
	v.CreatedDate = created_date
	if e.DeclinedDate != nil {
		declined_date := timestamppb.New(*e.DeclinedDate)
		v.DeclinedDate = declined_date
	}
	if e.ExpiredDate != nil {
		expired_date := timestamppb.New(*e.ExpiredDate)
		v.ExpiredDate = expired_date
	}
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	invitee := e.Invitee
	v.Invitee = invitee

	if edg := e.Edges.Inviter; edg != nil {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Inviter = &horus.Account{
			Id: id,
		}
	}

	if edg := e.Edges.Silo; edg != nil {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Silo = &horus.Silo{
			Id: id,
		}
	}
	return v, nil
}

// Create implements InvitationServiceServer.Create
func (svc *InvitationService) Create(ctx context.Context, req *horus.CreateInvitationRequest) (*horus.Invitation, error) {
	invitation := req.GetInvitation()
	m, err := svc.createBuilder(invitation)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoInvitation(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements InvitationServiceServer.Get
func (svc *InvitationService) Get(ctx context.Context, req *horus.GetInvitationRequest) (*horus.Invitation, error) {

	var (
		err error
		get *ent.Invitation
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case horus.GetInvitationRequest_VIEW_UNSPECIFIED:
		fallthrough
	case horus.GetInvitationRequest_BASIC:
		get, err = svc.client.Invitation.Get(ctx, id)
	case horus.GetInvitationRequest_WITH_EDGE_IDS:
		get, err = svc.client.Invitation.Query().
			Where(invitation.ID(id)).
			WithInviter(func(query *ent.AccountQuery) {
				query.Select(account.FieldID)
			}).
			WithSilo(func(query *ent.SiloQuery) {
				query.Select(silo.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoInvitation(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements InvitationServiceServer.Update
func (svc *InvitationService) Update(ctx context.Context, req *horus.UpdateInvitationRequest) (*horus.Invitation, error) {
	invitation := req.GetInvitation()
	var invitationID uuid.UUID
	if err := (&invitationID).UnmarshalBinary(invitation.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.Invitation.UpdateOneID(invitationID)
	invitationAcceptedDate := runtime.ExtractTime(invitation.GetAcceptedDate())
	m.SetAcceptedDate(invitationAcceptedDate)
	invitationCanceledDate := runtime.ExtractTime(invitation.GetCanceledDate())
	m.SetCanceledDate(invitationCanceledDate)
	invitationDeclinedDate := runtime.ExtractTime(invitation.GetDeclinedDate())
	m.SetDeclinedDate(invitationDeclinedDate)
	invitationExpiredDate := runtime.ExtractTime(invitation.GetExpiredDate())
	m.SetExpiredDate(invitationExpiredDate)

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoInvitation(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements InvitationServiceServer.Delete
func (svc *InvitationService) Delete(ctx context.Context, req *horus.DeleteInvitationRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.Invitation.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *InvitationService) createBuilder(invitation *horus.Invitation) (*ent.InvitationCreate, error) {
	m := svc.client.Invitation.Create()
	invitationAcceptedDate := runtime.ExtractTime(invitation.GetAcceptedDate())
	m.SetAcceptedDate(invitationAcceptedDate)
	invitationCanceledDate := runtime.ExtractTime(invitation.GetCanceledDate())
	m.SetCanceledDate(invitationCanceledDate)
	invitationCreatedDate := runtime.ExtractTime(invitation.GetCreatedDate())
	m.SetCreatedDate(invitationCreatedDate)
	invitationDeclinedDate := runtime.ExtractTime(invitation.GetDeclinedDate())
	m.SetDeclinedDate(invitationDeclinedDate)
	invitationExpiredDate := runtime.ExtractTime(invitation.GetExpiredDate())
	m.SetExpiredDate(invitationExpiredDate)
	invitationInvitee := invitation.GetInvitee()
	m.SetInvitee(invitationInvitee)
	if invitation.GetInviter() != nil {
		var invitationInviter uuid.UUID
		if err := (&invitationInviter).UnmarshalBinary(invitation.GetInviter().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetInviterID(invitationInviter)
	}
	if invitation.GetSilo() != nil {
		var invitationSilo uuid.UUID
		if err := (&invitationSilo).UnmarshalBinary(invitation.GetSilo().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetSiloID(invitationSilo)
	}
	return m, nil
}
