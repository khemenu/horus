//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Horus_ListIdentities_FullMethodName       = "/khepri.horus.Horus/ListIdentities"
	Horus_DeleteIdentity_FullMethodName       = "/khepri.horus.Horus/DeleteIdentity"
	Horus_NewOrg_FullMethodName               = "/khepri.horus.Horus/NewOrg"
	Horus_ListOrgs_FullMethodName             = "/khepri.horus.Horus/ListOrgs"
	Horus_UpdateOrg_FullMethodName            = "/khepri.horus.Horus/UpdateOrg"
	Horus_InviteUser_FullMethodName           = "/khepri.horus.Horus/InviteUser"
	Horus_JoinOrg_FullMethodName              = "/khepri.horus.Horus/JoinOrg"
	Horus_LeaveOrg_FullMethodName             = "/khepri.horus.Horus/LeaveOrg"
	Horus_SetRoleOrg_FullMethodName           = "/khepri.horus.Horus/SetRoleOrg"
	Horus_NewTeam_FullMethodName              = "/khepri.horus.Horus/NewTeam"
	Horus_ListTeams_FullMethodName            = "/khepri.horus.Horus/ListTeams"
	Horus_UpdateTeam_FullMethodName           = "/khepri.horus.Horus/UpdateTeam"
	Horus_InviteMember_FullMethodName         = "/khepri.horus.Horus/InviteMember"
	Horus_JoinTeam_FullMethodName             = "/khepri.horus.Horus/JoinTeam"
	Horus_LeaveTeam_FullMethodName            = "/khepri.horus.Horus/LeaveTeam"
	Horus_AddMemberIdentity_FullMethodName    = "/khepri.horus.Horus/AddMemberIdentity"
	Horus_RemoveMemberIdentity_FullMethodName = "/khepri.horus.Horus/RemoveMemberIdentity"
)

// HorusClient is the client API for Horus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HorusClient interface {
	// List identities
	ListIdentities(ctx context.Context, in *ListIdentitiesReq, opts ...grpc.CallOption) (*ListIdentitiesRes, error)
	// Delete an identity.
	DeleteIdentity(ctx context.Context, in *DeleteIdentityReq, opts ...grpc.CallOption) (*DeleteIdentityRes, error)
	// Creates an organization.
	NewOrg(ctx context.Context, in *NewOrgReq, opts ...grpc.CallOption) (*NewOrgRes, error)
	// Lists organizations the user belongs to.
	ListOrgs(ctx context.Context, in *ListOrgsReq, opts ...grpc.CallOption) (*ListOrgsRes, error)
	// Updates orgnataion info.
	UpdateOrg(ctx context.Context, in *UpdateOrgReq, opts ...grpc.CallOption) (*UpdateOrgRes, error)
	// Invites a user to the organization.
	InviteUser(ctx context.Context, in *InviteUserReq, opts ...grpc.CallOption) (*InviteUserRes, error)
	// Joins an organization.
	JoinOrg(ctx context.Context, in *JoinOrgReq, opts ...grpc.CallOption) (*JoinOrgRes, error)
	// Leaves an organization.
	LeaveOrg(ctx context.Context, in *LeaveOrgReq, opts ...grpc.CallOption) (*LeaveOrgRes, error)
	// Set role of the member for the orgnization.
	SetRoleOrg(ctx context.Context, in *SetRoleOrgReq, opts ...grpc.CallOption) (*SetRoleOrgRes, error)
	// rpc RemoveOrgMember
	// rpc DeleteOrg
	// Creates a team.
	NewTeam(ctx context.Context, in *NewTeamReq, opts ...grpc.CallOption) (*NewTeamRes, error)
	// Lists teams.
	ListTeams(ctx context.Context, in *ListTeamsReq, opts ...grpc.CallOption) (*ListTeamsRes, error)
	// Updates team info.
	UpdateTeam(ctx context.Context, in *UpdateTeamReq, opts ...grpc.CallOption) (*UpdateTeamRes, error)
	// Invites an orgnization member as a team member.
	InviteMember(ctx context.Context, in *InviteMemberReq, opts ...grpc.CallOption) (*InviteMemberRes, error)
	// Joins a team.
	JoinTeam(ctx context.Context, in *JoinTeamReq, opts ...grpc.CallOption) (*JoinTeamRes, error)
	// Leaves a team
	LeaveTeam(ctx context.Context, in *LeaveTeamReq, opts ...grpc.CallOption) (*LeaveTeamRes, error)
	// rpc SetRoleTeam
	// rpg RemoveTeamMember
	// rpc DeleteTeam
	// rpc ListMembers // TODO: stream?
	// rpc UpdateMember
	// Add an identity to the member.
	AddMemberIdentity(ctx context.Context, in *AddMemberIdentityReq, opts ...grpc.CallOption) (*AddMemberIdentityRes, error)
	// Remove an identity from the member.
	RemoveMemberIdentity(ctx context.Context, in *RemoveMemberIdentityReq, opts ...grpc.CallOption) (*RemoveMemberIdentityRes, error)
}

type horusClient struct {
	cc grpc.ClientConnInterface
}

func NewHorusClient(cc grpc.ClientConnInterface) HorusClient {
	return &horusClient{cc}
}

func (c *horusClient) ListIdentities(ctx context.Context, in *ListIdentitiesReq, opts ...grpc.CallOption) (*ListIdentitiesRes, error) {
	out := new(ListIdentitiesRes)
	err := c.cc.Invoke(ctx, Horus_ListIdentities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) DeleteIdentity(ctx context.Context, in *DeleteIdentityReq, opts ...grpc.CallOption) (*DeleteIdentityRes, error) {
	out := new(DeleteIdentityRes)
	err := c.cc.Invoke(ctx, Horus_DeleteIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) NewOrg(ctx context.Context, in *NewOrgReq, opts ...grpc.CallOption) (*NewOrgRes, error) {
	out := new(NewOrgRes)
	err := c.cc.Invoke(ctx, Horus_NewOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) ListOrgs(ctx context.Context, in *ListOrgsReq, opts ...grpc.CallOption) (*ListOrgsRes, error) {
	out := new(ListOrgsRes)
	err := c.cc.Invoke(ctx, Horus_ListOrgs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) UpdateOrg(ctx context.Context, in *UpdateOrgReq, opts ...grpc.CallOption) (*UpdateOrgRes, error) {
	out := new(UpdateOrgRes)
	err := c.cc.Invoke(ctx, Horus_UpdateOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) InviteUser(ctx context.Context, in *InviteUserReq, opts ...grpc.CallOption) (*InviteUserRes, error) {
	out := new(InviteUserRes)
	err := c.cc.Invoke(ctx, Horus_InviteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) JoinOrg(ctx context.Context, in *JoinOrgReq, opts ...grpc.CallOption) (*JoinOrgRes, error) {
	out := new(JoinOrgRes)
	err := c.cc.Invoke(ctx, Horus_JoinOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) LeaveOrg(ctx context.Context, in *LeaveOrgReq, opts ...grpc.CallOption) (*LeaveOrgRes, error) {
	out := new(LeaveOrgRes)
	err := c.cc.Invoke(ctx, Horus_LeaveOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) SetRoleOrg(ctx context.Context, in *SetRoleOrgReq, opts ...grpc.CallOption) (*SetRoleOrgRes, error) {
	out := new(SetRoleOrgRes)
	err := c.cc.Invoke(ctx, Horus_SetRoleOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) NewTeam(ctx context.Context, in *NewTeamReq, opts ...grpc.CallOption) (*NewTeamRes, error) {
	out := new(NewTeamRes)
	err := c.cc.Invoke(ctx, Horus_NewTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) ListTeams(ctx context.Context, in *ListTeamsReq, opts ...grpc.CallOption) (*ListTeamsRes, error) {
	out := new(ListTeamsRes)
	err := c.cc.Invoke(ctx, Horus_ListTeams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) UpdateTeam(ctx context.Context, in *UpdateTeamReq, opts ...grpc.CallOption) (*UpdateTeamRes, error) {
	out := new(UpdateTeamRes)
	err := c.cc.Invoke(ctx, Horus_UpdateTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) InviteMember(ctx context.Context, in *InviteMemberReq, opts ...grpc.CallOption) (*InviteMemberRes, error) {
	out := new(InviteMemberRes)
	err := c.cc.Invoke(ctx, Horus_InviteMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) JoinTeam(ctx context.Context, in *JoinTeamReq, opts ...grpc.CallOption) (*JoinTeamRes, error) {
	out := new(JoinTeamRes)
	err := c.cc.Invoke(ctx, Horus_JoinTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) LeaveTeam(ctx context.Context, in *LeaveTeamReq, opts ...grpc.CallOption) (*LeaveTeamRes, error) {
	out := new(LeaveTeamRes)
	err := c.cc.Invoke(ctx, Horus_LeaveTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) AddMemberIdentity(ctx context.Context, in *AddMemberIdentityReq, opts ...grpc.CallOption) (*AddMemberIdentityRes, error) {
	out := new(AddMemberIdentityRes)
	err := c.cc.Invoke(ctx, Horus_AddMemberIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horusClient) RemoveMemberIdentity(ctx context.Context, in *RemoveMemberIdentityReq, opts ...grpc.CallOption) (*RemoveMemberIdentityRes, error) {
	out := new(RemoveMemberIdentityRes)
	err := c.cc.Invoke(ctx, Horus_RemoveMemberIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HorusServer is the server API for Horus service.
// All implementations must embed UnimplementedHorusServer
// for forward compatibility
type HorusServer interface {
	// List identities
	ListIdentities(context.Context, *ListIdentitiesReq) (*ListIdentitiesRes, error)
	// Delete an identity.
	DeleteIdentity(context.Context, *DeleteIdentityReq) (*DeleteIdentityRes, error)
	// Creates an organization.
	NewOrg(context.Context, *NewOrgReq) (*NewOrgRes, error)
	// Lists organizations the user belongs to.
	ListOrgs(context.Context, *ListOrgsReq) (*ListOrgsRes, error)
	// Updates orgnataion info.
	UpdateOrg(context.Context, *UpdateOrgReq) (*UpdateOrgRes, error)
	// Invites a user to the organization.
	InviteUser(context.Context, *InviteUserReq) (*InviteUserRes, error)
	// Joins an organization.
	JoinOrg(context.Context, *JoinOrgReq) (*JoinOrgRes, error)
	// Leaves an organization.
	LeaveOrg(context.Context, *LeaveOrgReq) (*LeaveOrgRes, error)
	// Set role of the member for the orgnization.
	SetRoleOrg(context.Context, *SetRoleOrgReq) (*SetRoleOrgRes, error)
	// rpc RemoveOrgMember
	// rpc DeleteOrg
	// Creates a team.
	NewTeam(context.Context, *NewTeamReq) (*NewTeamRes, error)
	// Lists teams.
	ListTeams(context.Context, *ListTeamsReq) (*ListTeamsRes, error)
	// Updates team info.
	UpdateTeam(context.Context, *UpdateTeamReq) (*UpdateTeamRes, error)
	// Invites an orgnization member as a team member.
	InviteMember(context.Context, *InviteMemberReq) (*InviteMemberRes, error)
	// Joins a team.
	JoinTeam(context.Context, *JoinTeamReq) (*JoinTeamRes, error)
	// Leaves a team
	LeaveTeam(context.Context, *LeaveTeamReq) (*LeaveTeamRes, error)
	// rpc SetRoleTeam
	// rpg RemoveTeamMember
	// rpc DeleteTeam
	// rpc ListMembers // TODO: stream?
	// rpc UpdateMember
	// Add an identity to the member.
	AddMemberIdentity(context.Context, *AddMemberIdentityReq) (*AddMemberIdentityRes, error)
	// Remove an identity from the member.
	RemoveMemberIdentity(context.Context, *RemoveMemberIdentityReq) (*RemoveMemberIdentityRes, error)
	mustEmbedUnimplementedHorusServer()
}

// UnimplementedHorusServer must be embedded to have forward compatible implementations.
type UnimplementedHorusServer struct {
}

func (UnimplementedHorusServer) ListIdentities(context.Context, *ListIdentitiesReq) (*ListIdentitiesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIdentities not implemented")
}
func (UnimplementedHorusServer) DeleteIdentity(context.Context, *DeleteIdentityReq) (*DeleteIdentityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdentity not implemented")
}
func (UnimplementedHorusServer) NewOrg(context.Context, *NewOrgReq) (*NewOrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrg not implemented")
}
func (UnimplementedHorusServer) ListOrgs(context.Context, *ListOrgsReq) (*ListOrgsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgs not implemented")
}
func (UnimplementedHorusServer) UpdateOrg(context.Context, *UpdateOrgReq) (*UpdateOrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrg not implemented")
}
func (UnimplementedHorusServer) InviteUser(context.Context, *InviteUserReq) (*InviteUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}
func (UnimplementedHorusServer) JoinOrg(context.Context, *JoinOrgReq) (*JoinOrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinOrg not implemented")
}
func (UnimplementedHorusServer) LeaveOrg(context.Context, *LeaveOrgReq) (*LeaveOrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveOrg not implemented")
}
func (UnimplementedHorusServer) SetRoleOrg(context.Context, *SetRoleOrgReq) (*SetRoleOrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoleOrg not implemented")
}
func (UnimplementedHorusServer) NewTeam(context.Context, *NewTeamReq) (*NewTeamRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTeam not implemented")
}
func (UnimplementedHorusServer) ListTeams(context.Context, *ListTeamsReq) (*ListTeamsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (UnimplementedHorusServer) UpdateTeam(context.Context, *UpdateTeamReq) (*UpdateTeamRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedHorusServer) InviteMember(context.Context, *InviteMemberReq) (*InviteMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMember not implemented")
}
func (UnimplementedHorusServer) JoinTeam(context.Context, *JoinTeamReq) (*JoinTeamRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTeam not implemented")
}
func (UnimplementedHorusServer) LeaveTeam(context.Context, *LeaveTeamReq) (*LeaveTeamRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveTeam not implemented")
}
func (UnimplementedHorusServer) AddMemberIdentity(context.Context, *AddMemberIdentityReq) (*AddMemberIdentityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberIdentity not implemented")
}
func (UnimplementedHorusServer) RemoveMemberIdentity(context.Context, *RemoveMemberIdentityReq) (*RemoveMemberIdentityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMemberIdentity not implemented")
}
func (UnimplementedHorusServer) mustEmbedUnimplementedHorusServer() {}

// UnsafeHorusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HorusServer will
// result in compilation errors.
type UnsafeHorusServer interface {
	mustEmbedUnimplementedHorusServer()
}

func RegisterHorusServer(s grpc.ServiceRegistrar, srv HorusServer) {
	s.RegisterService(&Horus_ServiceDesc, srv)
}

func _Horus_ListIdentities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdentitiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).ListIdentities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_ListIdentities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).ListIdentities(ctx, req.(*ListIdentitiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_DeleteIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdentityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).DeleteIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_DeleteIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).DeleteIdentity(ctx, req.(*DeleteIdentityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_NewOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).NewOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_NewOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).NewOrg(ctx, req.(*NewOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_ListOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).ListOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_ListOrgs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).ListOrgs(ctx, req.(*ListOrgsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_UpdateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).UpdateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_UpdateOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).UpdateOrg(ctx, req.(*UpdateOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_InviteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).InviteUser(ctx, req.(*InviteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_JoinOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).JoinOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_JoinOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).JoinOrg(ctx, req.(*JoinOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_LeaveOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).LeaveOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_LeaveOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).LeaveOrg(ctx, req.(*LeaveOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_SetRoleOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoleOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).SetRoleOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_SetRoleOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).SetRoleOrg(ctx, req.(*SetRoleOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_NewTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).NewTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_NewTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).NewTeam(ctx, req.(*NewTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_ListTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).ListTeams(ctx, req.(*ListTeamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_UpdateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).UpdateTeam(ctx, req.(*UpdateTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_InviteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).InviteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_InviteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).InviteMember(ctx, req.(*InviteMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_JoinTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).JoinTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_JoinTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).JoinTeam(ctx, req.(*JoinTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_LeaveTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).LeaveTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_LeaveTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).LeaveTeam(ctx, req.(*LeaveTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_AddMemberIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberIdentityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).AddMemberIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_AddMemberIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).AddMemberIdentity(ctx, req.(*AddMemberIdentityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horus_RemoveMemberIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberIdentityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorusServer).RemoveMemberIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Horus_RemoveMemberIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorusServer).RemoveMemberIdentity(ctx, req.(*RemoveMemberIdentityReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Horus_ServiceDesc is the grpc.ServiceDesc for Horus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Horus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "khepri.horus.Horus",
	HandlerType: (*HorusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIdentities",
			Handler:    _Horus_ListIdentities_Handler,
		},
		{
			MethodName: "DeleteIdentity",
			Handler:    _Horus_DeleteIdentity_Handler,
		},
		{
			MethodName: "NewOrg",
			Handler:    _Horus_NewOrg_Handler,
		},
		{
			MethodName: "ListOrgs",
			Handler:    _Horus_ListOrgs_Handler,
		},
		{
			MethodName: "UpdateOrg",
			Handler:    _Horus_UpdateOrg_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _Horus_InviteUser_Handler,
		},
		{
			MethodName: "JoinOrg",
			Handler:    _Horus_JoinOrg_Handler,
		},
		{
			MethodName: "LeaveOrg",
			Handler:    _Horus_LeaveOrg_Handler,
		},
		{
			MethodName: "SetRoleOrg",
			Handler:    _Horus_SetRoleOrg_Handler,
		},
		{
			MethodName: "NewTeam",
			Handler:    _Horus_NewTeam_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _Horus_ListTeams_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _Horus_UpdateTeam_Handler,
		},
		{
			MethodName: "InviteMember",
			Handler:    _Horus_InviteMember_Handler,
		},
		{
			MethodName: "JoinTeam",
			Handler:    _Horus_JoinTeam_Handler,
		},
		{
			MethodName: "LeaveTeam",
			Handler:    _Horus_LeaveTeam_Handler,
		},
		{
			MethodName: "AddMemberIdentity",
			Handler:    _Horus_AddMemberIdentity_Handler,
		},
		{
			MethodName: "RemoveMemberIdentity",
			Handler:    _Horus_RemoveMemberIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
