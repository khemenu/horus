//
syntax = "proto3";
package khepri.horus;

import "common.proto";

option go_package = "khepri.dev/horus/pb";

//
service Horus {
	// List identities
	rpc ListIdentities(ListIdentitiesReq) returns (ListIdentitiesRes) {};
	// Delete an identity.
	rpc DeleteIdentity(DeleteIdentityReq) returns (DeleteIdentityRes) {};
	// Creates an organization.
	rpc NewOrg(NewOrgReq) returns (NewOrgRes) {};
	// Lists organizations the user belongs to.
	rpc ListOrgs(ListOrgsReq) returns (ListOrgsRes) {};
	// Updates orgnataion info.
	rpc UpdateOrg(UpdateOrgReq) returns (UpdateOrgRes) {};
	// Invites a user to the organization.
	rpc InviteUser(InviteUserReq) returns (InviteUserRes) {};
	// Joins an organization.
	rpc JoinOrg(JoinOrgReq) returns (JoinOrgRes) {};
	// Leaves an organization.
	rpc LeaveOrg(LeaveOrgReq) returns (LeaveOrgRes) {};
	// Sets role of the member for the orgnization.
	rpc SetRoleOrg(SetRoleOrgReq) returns (SetRoleOrgRes) {};
	// rpc DeleteOrgMember
	// rpc DeleteOrg
	// Creates a team.
	rpc NewTeam(NewTeamReq) returns (NewTeamRes) {};
	// Lists teams.
	rpc ListTeams(ListTeamsReq) returns (ListTeamsRes) {};
	// Updates team info.
	rpc UpdateTeam(UpdateTeamReq) returns (UpdateTeamRes) {};
	// Invites an orgnization member as a team member.
	rpc InviteMember(InviteMemberReq) returns (InviteMemberRes) {};
	// Joins a team.
	rpc JoinTeam(JoinTeamReq) returns (JoinTeamRes) {};
	// Leaves a team
	rpc LeaveTeam(LeaveTeamReq) returns (LeaveTeamRes) {};
	// Sets role of the member for the team.
	rpc SetRoleTeam(SetRoleTeamReq) returns (SetRoleTeamRes) {};
	// Deletes a team member.
	rpc DeleteTeamMember(DeleteTeamMemberReq) returns (DeleteTeamMemberRes) {};
	// Deletes a team.
	rpc DeleteTeam(DeleteTeamReq) returns (DeleteTeamRes) {};
	// rpc ListMembers // TODO: stream?
	// rpc UpdateMember
	// Add an identity to the member.
	rpc AddMemberIdentity(AddMemberIdentityReq) returns (AddMemberIdentityRes) {};
	// Remove an identity from the member.
	rpc RemoveMemberIdentity(RemoveMemberIdentityReq) returns (RemoveMemberIdentityRes) {};
}

message ListIdentitiesReq {}
message ListIdentitiesRes {
	repeated Identity identities = 1; // List of identities of the user.
}

message DeleteIdentityReq {
	string identity_value = 1; // Value of the identity to delete.
}
message DeleteIdentityRes {}

message NewOrgReq {}
message NewOrgRes {
	Org    org   = 1; // The organization just created.
	Member owner = 2; // Owner of the organization, the actor.
}

message ListOrgsReq {}
message ListOrgsRes {
	// List of organizations the user belongs to.
	repeated Org orgs = 1;
}

message UpdateOrgReq {
	// Organization to update.
	Org org = 1;
}
message UpdateOrgRes {}

message InviteUserReq {
	bytes    org_id   = 1; // Organization to be invited.
	Identity identity = 2; // Identity of the user to invite.
}
message InviteUserRes {}

message JoinOrgReq {
	bytes org_id = 1; // Organization to join.
}
message JoinOrgRes {}

message LeaveOrgReq {
	bytes org_id = 1; // Organization to leave.
}
message LeaveOrgRes {}

message SetRoleOrgReq {
	bytes   member_id = 1; // ID of the member to change the role.
	RoleOrg role      = 2; // Role to be changed.
}
message SetRoleOrgRes {}

message NewTeamReq {
	bytes  org_id = 1; // ID of the organization where the team will be created.
	string name   = 2; // Name of the team to be created.
}
message NewTeamRes {
	Team team = 1; // The team just created.
}

message ListTeamsReq {
	bytes org_id = 1; //
}
message ListTeamsRes {
	repeated Team teams = 1; //
}

message UpdateTeamReq {
	bytes  team_id = 1; //
	string name    = 2; //
}
message UpdateTeamRes {}

message InviteMemberReq {
	bytes team_id   = 1; // Team to invite members to.
	bytes member_id = 2; // ID of the member to invite.
}
message InviteMemberRes {}

message JoinTeamReq {
	bytes team_id = 1; // Team to invite members to.
}
message JoinTeamRes {}

message LeaveTeamReq {
	bytes team_id = 1; // Team to leave.
}
message LeaveTeamRes {}

message SetRoleTeamReq {
	bytes    team_id   = 1; //
	bytes    member_id = 2; //
	RoleTeam role      = 3; //
}
message SetRoleTeamRes {}

message DeleteTeamMemberReq {
	bytes team_id   = 1; // ID of the team from which to delete a member.
	bytes member_id = 2; // ID of the member to delete from a team.
}
message DeleteTeamMemberRes {}

message DeleteTeamReq {
	bytes team_id = 1; // ID of the team to delete from an organization.
}
message DeleteTeamRes {}

message AddMemberIdentityReq {
	bytes  member_id      = 1; // ID of the member to add the identity.
	string identity_value = 2; // Value of the identity to be added.
}
message AddMemberIdentityRes {}

message RemoveMemberIdentityReq {
	bytes  member_id      = 1; // ID of the member to remove the identity.
	string identity_value = 2; // Value of the identity to be removeed.
}
message RemoveMemberIdentityRes {}
