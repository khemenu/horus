// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"khepri.dev/horus"
	"khepri.dev/horus/store/ent/identity"
	"khepri.dev/horus/store/ent/member"
	"khepri.dev/horus/store/ent/predicate"
	"khepri.dev/horus/store/ent/team"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (mu *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetRole sets the "role" field.
func (mu *MemberUpdate) SetRole(ho horus.RoleOrg) *MemberUpdate {
	mu.mutation.SetRole(ho)
	return mu
}

// SetName sets the "name" field.
func (mu *MemberUpdate) SetName(s string) *MemberUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableName(s *string) *MemberUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (mu *MemberUpdate) AddTeamIDs(ids ...uuid.UUID) *MemberUpdate {
	mu.mutation.AddTeamIDs(ids...)
	return mu
}

// AddTeams adds the "teams" edges to the Team entity.
func (mu *MemberUpdate) AddTeams(t ...*Team) *MemberUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddTeamIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the Identity entity by IDs.
func (mu *MemberUpdate) AddContactIDs(ids ...string) *MemberUpdate {
	mu.mutation.AddContactIDs(ids...)
	return mu
}

// AddContacts adds the "contacts" edges to the Identity entity.
func (mu *MemberUpdate) AddContacts(i ...*Identity) *MemberUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return mu.AddContactIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (mu *MemberUpdate) Mutation() *MemberMutation {
	return mu.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (mu *MemberUpdate) ClearTeams() *MemberUpdate {
	mu.mutation.ClearTeams()
	return mu
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (mu *MemberUpdate) RemoveTeamIDs(ids ...uuid.UUID) *MemberUpdate {
	mu.mutation.RemoveTeamIDs(ids...)
	return mu
}

// RemoveTeams removes "teams" edges to Team entities.
func (mu *MemberUpdate) RemoveTeams(t ...*Team) *MemberUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveTeamIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the Identity entity.
func (mu *MemberUpdate) ClearContacts() *MemberUpdate {
	mu.mutation.ClearContacts()
	return mu
}

// RemoveContactIDs removes the "contacts" edge to Identity entities by IDs.
func (mu *MemberUpdate) RemoveContactIDs(ids ...string) *MemberUpdate {
	mu.mutation.RemoveContactIDs(ids...)
	return mu
}

// RemoveContacts removes "contacts" edges to Identity entities.
func (mu *MemberUpdate) RemoveContacts(i ...*Identity) *MemberUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return mu.RemoveContactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemberUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemberUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MemberUpdate) check() error {
	if v, ok := mu.mutation.Role(); ok {
		if err := member.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Member.role": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Name(); ok {
		if err := member.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Member.name": %w`, err)}
		}
	}
	if _, ok := mu.mutation.UserID(); mu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Member.user"`)
	}
	if _, ok := mu.mutation.OrgID(); mu.mutation.OrgCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Member.org"`)
	}
	return nil
}

func (mu *MemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Role(); ok {
		_spec.SetField(member.FieldRole, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(member.FieldName, field.TypeString, value)
	}
	if mu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   member.TeamsTable,
			Columns: member.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		createE := &MembershipCreate{config: mu.config, mutation: newMembershipMutation(mu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !mu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   member.TeamsTable,
			Columns: member.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MembershipCreate{config: mu.config, mutation: newMembershipMutation(mu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   member.TeamsTable,
			Columns: member.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MembershipCreate{config: mu.config, mutation: newMembershipMutation(mu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.ContactsTable,
			Columns: []string{member.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedContactsIDs(); len(nodes) > 0 && !mu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.ContactsTable,
			Columns: []string{member.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.ContactsTable,
			Columns: []string{member.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberMutation
}

// SetRole sets the "role" field.
func (muo *MemberUpdateOne) SetRole(ho horus.RoleOrg) *MemberUpdateOne {
	muo.mutation.SetRole(ho)
	return muo
}

// SetName sets the "name" field.
func (muo *MemberUpdateOne) SetName(s string) *MemberUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableName(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (muo *MemberUpdateOne) AddTeamIDs(ids ...uuid.UUID) *MemberUpdateOne {
	muo.mutation.AddTeamIDs(ids...)
	return muo
}

// AddTeams adds the "teams" edges to the Team entity.
func (muo *MemberUpdateOne) AddTeams(t ...*Team) *MemberUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddTeamIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the Identity entity by IDs.
func (muo *MemberUpdateOne) AddContactIDs(ids ...string) *MemberUpdateOne {
	muo.mutation.AddContactIDs(ids...)
	return muo
}

// AddContacts adds the "contacts" edges to the Identity entity.
func (muo *MemberUpdateOne) AddContacts(i ...*Identity) *MemberUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return muo.AddContactIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (muo *MemberUpdateOne) Mutation() *MemberMutation {
	return muo.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (muo *MemberUpdateOne) ClearTeams() *MemberUpdateOne {
	muo.mutation.ClearTeams()
	return muo
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (muo *MemberUpdateOne) RemoveTeamIDs(ids ...uuid.UUID) *MemberUpdateOne {
	muo.mutation.RemoveTeamIDs(ids...)
	return muo
}

// RemoveTeams removes "teams" edges to Team entities.
func (muo *MemberUpdateOne) RemoveTeams(t ...*Team) *MemberUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveTeamIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the Identity entity.
func (muo *MemberUpdateOne) ClearContacts() *MemberUpdateOne {
	muo.mutation.ClearContacts()
	return muo
}

// RemoveContactIDs removes the "contacts" edge to Identity entities by IDs.
func (muo *MemberUpdateOne) RemoveContactIDs(ids ...string) *MemberUpdateOne {
	muo.mutation.RemoveContactIDs(ids...)
	return muo
}

// RemoveContacts removes "contacts" edges to Identity entities.
func (muo *MemberUpdateOne) RemoveContacts(i ...*Identity) *MemberUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return muo.RemoveContactIDs(ids...)
}

// Where appends a list predicates to the MemberUpdate builder.
func (muo *MemberUpdateOne) Where(ps ...predicate.Member) *MemberUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemberUpdateOne) Select(field string, fields ...string) *MemberUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Member entity.
func (muo *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MemberUpdateOne) check() error {
	if v, ok := muo.mutation.Role(); ok {
		if err := member.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Member.role": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Name(); ok {
		if err := member.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Member.name": %w`, err)}
		}
	}
	if _, ok := muo.mutation.UserID(); muo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Member.user"`)
	}
	if _, ok := muo.mutation.OrgID(); muo.mutation.OrgCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Member.org"`)
	}
	return nil
}

func (muo *MemberUpdateOne) sqlSave(ctx context.Context) (_node *Member, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Member.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, member.FieldID)
		for _, f := range fields {
			if !member.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != member.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Role(); ok {
		_spec.SetField(member.FieldRole, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(member.FieldName, field.TypeString, value)
	}
	if muo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   member.TeamsTable,
			Columns: member.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		createE := &MembershipCreate{config: muo.config, mutation: newMembershipMutation(muo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !muo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   member.TeamsTable,
			Columns: member.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MembershipCreate{config: muo.config, mutation: newMembershipMutation(muo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   member.TeamsTable,
			Columns: member.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MembershipCreate{config: muo.config, mutation: newMembershipMutation(muo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.ContactsTable,
			Columns: []string{member.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedContactsIDs(); len(nodes) > 0 && !muo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.ContactsTable,
			Columns: []string{member.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.ContactsTable,
			Columns: []string{member.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Member{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
