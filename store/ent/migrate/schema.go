// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AuthorizersColumns holds the columns for the "authorizers" table.
	AuthorizersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "primary_id", Type: field.TypeString},
		{Name: "owner_id", Type: field.TypeUUID, Unique: true},
	}
	// AuthorizersTable holds the schema information for the "authorizers" table.
	AuthorizersTable = &schema.Table{
		Name:       "authorizers",
		Columns:    AuthorizersColumns,
		PrimaryKey: []*schema.Column{AuthorizersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "authorizers_identities_primary",
				Columns:    []*schema.Column{AuthorizersColumns[1]},
				RefColumns: []*schema.Column{IdentitiesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "authorizers_users_authorizer",
				Columns:    []*schema.Column{AuthorizersColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// IdentitiesColumns holds the columns for the "identities" table.
	IdentitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Default: ""},
		{Name: "kind", Type: field.TypeString},
		{Name: "verified_by", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "owner_id", Type: field.TypeUUID},
	}
	// IdentitiesTable holds the schema information for the "identities" table.
	IdentitiesTable = &schema.Table{
		Name:       "identities",
		Columns:    IdentitiesColumns,
		PrimaryKey: []*schema.Column{IdentitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "identities_users_identities",
				Columns:    []*schema.Column{IdentitiesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TokensColumns holds the columns for the "tokens" table.
	TokensColumns = []*schema.Column{
		{Name: "value", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeString},
		{Name: "name", Type: field.TypeString, Default: ""},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "expired_at", Type: field.TypeTime},
		{Name: "owner_id", Type: field.TypeUUID},
	}
	// TokensTable holds the schema information for the "tokens" table.
	TokensTable = &schema.Table{
		Name:       "tokens",
		Columns:    TokensColumns,
		PrimaryKey: []*schema.Column{TokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tokens_users_tokens",
				Columns:    []*schema.Column{TokensColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "alias", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AuthorizersTable,
		IdentitiesTable,
		TokensTable,
		UsersTable,
	}
)

func init() {
	AuthorizersTable.ForeignKeys[0].RefTable = IdentitiesTable
	AuthorizersTable.ForeignKeys[1].RefTable = UsersTable
	IdentitiesTable.ForeignKeys[0].RefTable = UsersTable
	TokensTable.ForeignKeys[0].RefTable = UsersTable
}
