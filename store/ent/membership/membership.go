// Code generated by ent, DO NOT EDIT.

package membership

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"khepri.dev/horus"
)

const (
	// Label holds the string label denoting the membership type in the database.
	Label = "membership"
	// FieldTeamID holds the string denoting the team_id field in the database.
	FieldTeamID = "team_id"
	// FieldMemberID holds the string denoting the member_id field in the database.
	FieldMemberID = "member_id"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// EdgeMember holds the string denoting the member edge name in mutations.
	EdgeMember = "member"
	// TeamFieldID holds the string denoting the ID field of the Team.
	TeamFieldID = "id"
	// MemberFieldID holds the string denoting the ID field of the Member.
	MemberFieldID = "id"
	// Table holds the table name of the membership in the database.
	Table = "memberships"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "memberships"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_id"
	// MemberTable is the table that holds the member relation/edge.
	MemberTable = "memberships"
	// MemberInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	MemberInverseTable = "members"
	// MemberColumn is the table column denoting the member relation/edge.
	MemberColumn = "member_id"
)

// Columns holds all SQL columns for membership fields.
var Columns = []string{
	FieldTeamID,
	FieldMemberID,
	FieldRole,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r horus.RoleTeam) error {
	switch r {
	case "owner", "member", "invitee":
		return nil
	default:
		return fmt.Errorf("membership: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the Membership queries.
type OrderOption func(*sql.Selector)

// ByTeamID orders the results by the team_id field.
func ByTeamID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTeamID, opts...).ToFunc()
}

// ByMemberID orders the results by the member_id field.
func ByMemberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemberID, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByMemberField orders the results by member field.
func ByMemberField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberStep(), sql.OrderByField(field, opts...))
	}
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, TeamColumn),
		sqlgraph.To(TeamInverseTable, TeamFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TeamTable, TeamColumn),
	)
}
func newMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, MemberColumn),
		sqlgraph.To(MemberInverseTable, MemberFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MemberTable, MemberColumn),
	)
}
