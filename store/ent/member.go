// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"khepri.dev/horus"
	"khepri.dev/horus/store/ent/member"
	"khepri.dev/horus/store/ent/org"
	"khepri.dev/horus/store/ent/user"
)

// Member is the model entity for the Member schema.
type Member struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// OrgID holds the value of the "org_id" field.
	OrgID uuid.UUID `json:"org_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Role holds the value of the "role" field.
	Role horus.RoleOrg `json:"role,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MemberQuery when eager-loading is set.
	Edges        MemberEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MemberEdges holds the relations/edges for other nodes in the graph.
type MemberEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Org holds the value of the org edge.
	Org *Org `json:"org,omitempty"`
	// Teams holds the value of the teams edge.
	Teams []*Team `json:"teams,omitempty"`
	// Contacts holds the value of the contacts edge.
	Contacts []*Identity `json:"contacts,omitempty"`
	// Memberships holds the value of the memberships edge.
	Memberships []*Membership `json:"memberships,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MemberEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OrgOrErr returns the Org value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MemberEdges) OrgOrErr() (*Org, error) {
	if e.loadedTypes[1] {
		if e.Org == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: org.Label}
		}
		return e.Org, nil
	}
	return nil, &NotLoadedError{edge: "org"}
}

// TeamsOrErr returns the Teams value or an error if the edge
// was not loaded in eager-loading.
func (e MemberEdges) TeamsOrErr() ([]*Team, error) {
	if e.loadedTypes[2] {
		return e.Teams, nil
	}
	return nil, &NotLoadedError{edge: "teams"}
}

// ContactsOrErr returns the Contacts value or an error if the edge
// was not loaded in eager-loading.
func (e MemberEdges) ContactsOrErr() ([]*Identity, error) {
	if e.loadedTypes[3] {
		return e.Contacts, nil
	}
	return nil, &NotLoadedError{edge: "contacts"}
}

// MembershipsOrErr returns the Memberships value or an error if the edge
// was not loaded in eager-loading.
func (e MemberEdges) MembershipsOrErr() ([]*Membership, error) {
	if e.loadedTypes[4] {
		return e.Memberships, nil
	}
	return nil, &NotLoadedError{edge: "memberships"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Member) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case member.FieldRole, member.FieldName:
			values[i] = new(sql.NullString)
		case member.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case member.FieldID, member.FieldOrgID, member.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Member fields.
func (m *Member) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case member.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case member.FieldOrgID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value != nil {
				m.OrgID = *value
			}
		case member.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				m.UserID = *value
			}
		case member.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				m.Role = horus.RoleOrg(value.String)
			}
		case member.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case member.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Member.
// This includes values selected through modifiers, order, etc.
func (m *Member) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Member entity.
func (m *Member) QueryUser() *UserQuery {
	return NewMemberClient(m.config).QueryUser(m)
}

// QueryOrg queries the "org" edge of the Member entity.
func (m *Member) QueryOrg() *OrgQuery {
	return NewMemberClient(m.config).QueryOrg(m)
}

// QueryTeams queries the "teams" edge of the Member entity.
func (m *Member) QueryTeams() *TeamQuery {
	return NewMemberClient(m.config).QueryTeams(m)
}

// QueryContacts queries the "contacts" edge of the Member entity.
func (m *Member) QueryContacts() *IdentityQuery {
	return NewMemberClient(m.config).QueryContacts(m)
}

// QueryMemberships queries the "memberships" edge of the Member entity.
func (m *Member) QueryMemberships() *MembershipQuery {
	return NewMemberClient(m.config).QueryMemberships(m)
}

// Update returns a builder for updating this Member.
// Note that you need to call Member.Unwrap() before calling this method if this Member
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Member) Update() *MemberUpdateOne {
	return NewMemberClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Member entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Member) Unwrap() *Member {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Member is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Member) String() string {
	var builder strings.Builder
	builder.WriteString("Member(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("org_id=")
	builder.WriteString(fmt.Sprintf("%v", m.OrgID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", m.UserID))
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", m.Role))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Members is a parsable slice of Member.
type Members []*Member
