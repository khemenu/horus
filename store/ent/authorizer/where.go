// Code generated by ent, DO NOT EDIT.

package authorizer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"khepri.dev/horus/store/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldLTE(FieldID, id))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v uuid.UUID) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldEQ(FieldOwnerID, v))
}

// PrimaryID applies equality check predicate on the "primary_id" field. It's identical to PrimaryIDEQ.
func PrimaryID(v string) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldEQ(FieldPrimaryID, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v uuid.UUID) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v uuid.UUID) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...uuid.UUID) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...uuid.UUID) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldNotIn(FieldOwnerID, vs...))
}

// PrimaryIDEQ applies the EQ predicate on the "primary_id" field.
func PrimaryIDEQ(v string) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldEQ(FieldPrimaryID, v))
}

// PrimaryIDNEQ applies the NEQ predicate on the "primary_id" field.
func PrimaryIDNEQ(v string) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldNEQ(FieldPrimaryID, v))
}

// PrimaryIDIn applies the In predicate on the "primary_id" field.
func PrimaryIDIn(vs ...string) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldIn(FieldPrimaryID, vs...))
}

// PrimaryIDNotIn applies the NotIn predicate on the "primary_id" field.
func PrimaryIDNotIn(vs ...string) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldNotIn(FieldPrimaryID, vs...))
}

// PrimaryIDGT applies the GT predicate on the "primary_id" field.
func PrimaryIDGT(v string) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldGT(FieldPrimaryID, v))
}

// PrimaryIDGTE applies the GTE predicate on the "primary_id" field.
func PrimaryIDGTE(v string) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldGTE(FieldPrimaryID, v))
}

// PrimaryIDLT applies the LT predicate on the "primary_id" field.
func PrimaryIDLT(v string) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldLT(FieldPrimaryID, v))
}

// PrimaryIDLTE applies the LTE predicate on the "primary_id" field.
func PrimaryIDLTE(v string) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldLTE(FieldPrimaryID, v))
}

// PrimaryIDContains applies the Contains predicate on the "primary_id" field.
func PrimaryIDContains(v string) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldContains(FieldPrimaryID, v))
}

// PrimaryIDHasPrefix applies the HasPrefix predicate on the "primary_id" field.
func PrimaryIDHasPrefix(v string) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldHasPrefix(FieldPrimaryID, v))
}

// PrimaryIDHasSuffix applies the HasSuffix predicate on the "primary_id" field.
func PrimaryIDHasSuffix(v string) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldHasSuffix(FieldPrimaryID, v))
}

// PrimaryIDEqualFold applies the EqualFold predicate on the "primary_id" field.
func PrimaryIDEqualFold(v string) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldEqualFold(FieldPrimaryID, v))
}

// PrimaryIDContainsFold applies the ContainsFold predicate on the "primary_id" field.
func PrimaryIDContainsFold(v string) predicate.Authorizer {
	return predicate.Authorizer(sql.FieldContainsFold(FieldPrimaryID, v))
}

// HasPrimary applies the HasEdge predicate on the "primary" edge.
func HasPrimary() predicate.Authorizer {
	return predicate.Authorizer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PrimaryTable, PrimaryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryWith applies the HasEdge predicate on the "primary" edge with a given conditions (other predicates).
func HasPrimaryWith(preds ...predicate.Identity) predicate.Authorizer {
	return predicate.Authorizer(func(s *sql.Selector) {
		step := newPrimaryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Authorizer {
	return predicate.Authorizer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Authorizer {
	return predicate.Authorizer(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Authorizer) predicate.Authorizer {
	return predicate.Authorizer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Authorizer) predicate.Authorizer {
	return predicate.Authorizer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Authorizer) predicate.Authorizer {
	return predicate.Authorizer(func(s *sql.Selector) {
		p(s.Not())
	})
}
