// Code generated by ent, DO NOT EDIT.

package authorizer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the authorizer type in the database.
	Label = "authorizer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldPrimaryID holds the string denoting the primary_id field in the database.
	FieldPrimaryID = "primary_id"
	// EdgePrimary holds the string denoting the primary edge name in mutations.
	EdgePrimary = "primary"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the authorizer in the database.
	Table = "authorizers"
	// PrimaryTable is the table that holds the primary relation/edge.
	PrimaryTable = "authorizers"
	// PrimaryInverseTable is the table name for the Identity entity.
	// It exists in this package in order to avoid circular dependency with the "identity" package.
	PrimaryInverseTable = "identities"
	// PrimaryColumn is the table column denoting the primary relation/edge.
	PrimaryColumn = "primary_id"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "authorizers"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
)

// Columns holds all SQL columns for authorizer fields.
var Columns = []string{
	FieldID,
	FieldOwnerID,
	FieldPrimaryID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PrimaryIDValidator is a validator for the "primary_id" field. It is called by the builders before save.
	PrimaryIDValidator func(string) error
)

// OrderOption defines the ordering options for the Authorizer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByPrimaryID orders the results by the primary_id field.
func ByPrimaryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrimaryID, opts...).ToFunc()
}

// ByPrimaryField orders the results by primary field.
func ByPrimaryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrimaryStep(), sql.OrderByField(field, opts...))
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newPrimaryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrimaryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PrimaryTable, PrimaryColumn),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OwnerTable, OwnerColumn),
	)
}
