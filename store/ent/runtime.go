// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"khepri.dev/horus/store/ent/authorizer"
	"khepri.dev/horus/store/ent/identity"
	"khepri.dev/horus/store/ent/schema"
	"khepri.dev/horus/store/ent/token"
	"khepri.dev/horus/store/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	authorizerFields := schema.Authorizer{}.Fields()
	_ = authorizerFields
	// authorizerDescPrimaryID is the schema descriptor for primary_id field.
	authorizerDescPrimaryID := authorizerFields[1].Descriptor()
	// authorizer.PrimaryIDValidator is a validator for the "primary_id" field. It is called by the builders before save.
	authorizer.PrimaryIDValidator = authorizerDescPrimaryID.Validators[0].(func(string) error)
	identityFields := schema.Identity{}.Fields()
	_ = identityFields
	// identityDescName is the schema descriptor for name field.
	identityDescName := identityFields[2].Descriptor()
	// identity.DefaultName holds the default value on creation for the name field.
	identity.DefaultName = identityDescName.Default.(string)
	// identityDescKind is the schema descriptor for kind field.
	identityDescKind := identityFields[3].Descriptor()
	// identity.KindValidator is a validator for the "kind" field. It is called by the builders before save.
	identity.KindValidator = identityDescKind.Validators[0].(func(string) error)
	// identityDescVerifiedBy is the schema descriptor for verified_by field.
	identityDescVerifiedBy := identityFields[4].Descriptor()
	// identity.VerifiedByValidator is a validator for the "verified_by" field. It is called by the builders before save.
	identity.VerifiedByValidator = identityDescVerifiedBy.Validators[0].(func(string) error)
	// identityDescCreatedAt is the schema descriptor for created_at field.
	identityDescCreatedAt := identityFields[5].Descriptor()
	// identity.DefaultCreatedAt holds the default value on creation for the created_at field.
	identity.DefaultCreatedAt = identityDescCreatedAt.Default.(func() time.Time)
	// identityDescID is the schema descriptor for id field.
	identityDescID := identityFields[0].Descriptor()
	// identity.IDValidator is a validator for the "id" field. It is called by the builders before save.
	identity.IDValidator = identityDescID.Validators[0].(func(string) error)
	tokenFields := schema.Token{}.Fields()
	_ = tokenFields
	// tokenDescType is the schema descriptor for type field.
	tokenDescType := tokenFields[2].Descriptor()
	// token.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	token.TypeValidator = tokenDescType.Validators[0].(func(string) error)
	// tokenDescName is the schema descriptor for name field.
	tokenDescName := tokenFields[3].Descriptor()
	// token.DefaultName holds the default value on creation for the name field.
	token.DefaultName = tokenDescName.Default.(string)
	// tokenDescCreatedAt is the schema descriptor for created_at field.
	tokenDescCreatedAt := tokenFields[4].Descriptor()
	// token.DefaultCreatedAt holds the default value on creation for the created_at field.
	token.DefaultCreatedAt = tokenDescCreatedAt.Default.(func() time.Time)
	// tokenDescID is the schema descriptor for id field.
	tokenDescID := tokenFields[0].Descriptor()
	// token.IDValidator is a validator for the "id" field. It is called by the builders before save.
	token.IDValidator = tokenDescID.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[2].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
