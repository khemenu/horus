// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"khepri.dev/horus/store/ent/authorizer"
	"khepri.dev/horus/store/ent/identity"
	"khepri.dev/horus/store/ent/user"
)

// Authorizer is the model entity for the Authorizer schema.
type Authorizer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID uuid.UUID `json:"owner_id,omitempty"`
	// PrimaryID holds the value of the "primary_id" field.
	PrimaryID string `json:"primary_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthorizerQuery when eager-loading is set.
	Edges        AuthorizerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AuthorizerEdges holds the relations/edges for other nodes in the graph.
type AuthorizerEdges struct {
	// Primary holds the value of the primary edge.
	Primary *Identity `json:"primary,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PrimaryOrErr returns the Primary value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthorizerEdges) PrimaryOrErr() (*Identity, error) {
	if e.loadedTypes[0] {
		if e.Primary == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: identity.Label}
		}
		return e.Primary, nil
	}
	return nil, &NotLoadedError{edge: "primary"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthorizerEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Authorizer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authorizer.FieldID:
			values[i] = new(sql.NullInt64)
		case authorizer.FieldPrimaryID:
			values[i] = new(sql.NullString)
		case authorizer.FieldOwnerID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Authorizer fields.
func (a *Authorizer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authorizer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case authorizer.FieldOwnerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value != nil {
				a.OwnerID = *value
			}
		case authorizer.FieldPrimaryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_id", values[i])
			} else if value.Valid {
				a.PrimaryID = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Authorizer.
// This includes values selected through modifiers, order, etc.
func (a *Authorizer) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryPrimary queries the "primary" edge of the Authorizer entity.
func (a *Authorizer) QueryPrimary() *IdentityQuery {
	return NewAuthorizerClient(a.config).QueryPrimary(a)
}

// QueryOwner queries the "owner" edge of the Authorizer entity.
func (a *Authorizer) QueryOwner() *UserQuery {
	return NewAuthorizerClient(a.config).QueryOwner(a)
}

// Update returns a builder for updating this Authorizer.
// Note that you need to call Authorizer.Unwrap() before calling this method if this Authorizer
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Authorizer) Update() *AuthorizerUpdateOne {
	return NewAuthorizerClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Authorizer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Authorizer) Unwrap() *Authorizer {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Authorizer is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Authorizer) String() string {
	var builder strings.Builder
	builder.WriteString("Authorizer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("owner_id=")
	builder.WriteString(fmt.Sprintf("%v", a.OwnerID))
	builder.WriteString(", ")
	builder.WriteString("primary_id=")
	builder.WriteString(a.PrimaryID)
	builder.WriteByte(')')
	return builder.String()
}

// Authorizers is a parsable slice of Authorizer.
type Authorizers []*Authorizer
