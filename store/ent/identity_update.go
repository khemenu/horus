// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"khepri.dev/horus"
	"khepri.dev/horus/store/ent/identity"
	"khepri.dev/horus/store/ent/member"
	"khepri.dev/horus/store/ent/predicate"
)

// IdentityUpdate is the builder for updating Identity entities.
type IdentityUpdate struct {
	config
	hooks    []Hook
	mutation *IdentityMutation
}

// Where appends a list predicates to the IdentityUpdate builder.
func (iu *IdentityUpdate) Where(ps ...predicate.Identity) *IdentityUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *IdentityUpdate) SetName(s string) *IdentityUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *IdentityUpdate) SetNillableName(s *string) *IdentityUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetVerifiedBy sets the "verified_by" field.
func (iu *IdentityUpdate) SetVerifiedBy(h horus.Verifier) *IdentityUpdate {
	iu.mutation.SetVerifiedBy(h)
	return iu
}

// AddMemberIDs adds the "member" edge to the Member entity by IDs.
func (iu *IdentityUpdate) AddMemberIDs(ids ...uuid.UUID) *IdentityUpdate {
	iu.mutation.AddMemberIDs(ids...)
	return iu
}

// AddMember adds the "member" edges to the Member entity.
func (iu *IdentityUpdate) AddMember(m ...*Member) *IdentityUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iu.AddMemberIDs(ids...)
}

// Mutation returns the IdentityMutation object of the builder.
func (iu *IdentityUpdate) Mutation() *IdentityMutation {
	return iu.mutation
}

// ClearMember clears all "member" edges to the Member entity.
func (iu *IdentityUpdate) ClearMember() *IdentityUpdate {
	iu.mutation.ClearMember()
	return iu
}

// RemoveMemberIDs removes the "member" edge to Member entities by IDs.
func (iu *IdentityUpdate) RemoveMemberIDs(ids ...uuid.UUID) *IdentityUpdate {
	iu.mutation.RemoveMemberIDs(ids...)
	return iu
}

// RemoveMember removes "member" edges to Member entities.
func (iu *IdentityUpdate) RemoveMember(m ...*Member) *IdentityUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iu.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IdentityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IdentityUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IdentityUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IdentityUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IdentityUpdate) check() error {
	if v, ok := iu.mutation.VerifiedBy(); ok {
		if err := identity.VerifiedByValidator(string(v)); err != nil {
			return &ValidationError{Name: "verified_by", err: fmt.Errorf(`ent: validator failed for field "Identity.verified_by": %w`, err)}
		}
	}
	if _, ok := iu.mutation.OwnerID(); iu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Identity.owner"`)
	}
	return nil
}

func (iu *IdentityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(identity.Table, identity.Columns, sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(identity.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.VerifiedBy(); ok {
		_spec.SetField(identity.FieldVerifiedBy, field.TypeString, value)
	}
	if iu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   identity.MemberTable,
			Columns: identity.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedMemberIDs(); len(nodes) > 0 && !iu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   identity.MemberTable,
			Columns: identity.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   identity.MemberTable,
			Columns: identity.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IdentityUpdateOne is the builder for updating a single Identity entity.
type IdentityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdentityMutation
}

// SetName sets the "name" field.
func (iuo *IdentityUpdateOne) SetName(s string) *IdentityUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *IdentityUpdateOne) SetNillableName(s *string) *IdentityUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetVerifiedBy sets the "verified_by" field.
func (iuo *IdentityUpdateOne) SetVerifiedBy(h horus.Verifier) *IdentityUpdateOne {
	iuo.mutation.SetVerifiedBy(h)
	return iuo
}

// AddMemberIDs adds the "member" edge to the Member entity by IDs.
func (iuo *IdentityUpdateOne) AddMemberIDs(ids ...uuid.UUID) *IdentityUpdateOne {
	iuo.mutation.AddMemberIDs(ids...)
	return iuo
}

// AddMember adds the "member" edges to the Member entity.
func (iuo *IdentityUpdateOne) AddMember(m ...*Member) *IdentityUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iuo.AddMemberIDs(ids...)
}

// Mutation returns the IdentityMutation object of the builder.
func (iuo *IdentityUpdateOne) Mutation() *IdentityMutation {
	return iuo.mutation
}

// ClearMember clears all "member" edges to the Member entity.
func (iuo *IdentityUpdateOne) ClearMember() *IdentityUpdateOne {
	iuo.mutation.ClearMember()
	return iuo
}

// RemoveMemberIDs removes the "member" edge to Member entities by IDs.
func (iuo *IdentityUpdateOne) RemoveMemberIDs(ids ...uuid.UUID) *IdentityUpdateOne {
	iuo.mutation.RemoveMemberIDs(ids...)
	return iuo
}

// RemoveMember removes "member" edges to Member entities.
func (iuo *IdentityUpdateOne) RemoveMember(m ...*Member) *IdentityUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iuo.RemoveMemberIDs(ids...)
}

// Where appends a list predicates to the IdentityUpdate builder.
func (iuo *IdentityUpdateOne) Where(ps ...predicate.Identity) *IdentityUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IdentityUpdateOne) Select(field string, fields ...string) *IdentityUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Identity entity.
func (iuo *IdentityUpdateOne) Save(ctx context.Context) (*Identity, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IdentityUpdateOne) SaveX(ctx context.Context) *Identity {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IdentityUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IdentityUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IdentityUpdateOne) check() error {
	if v, ok := iuo.mutation.VerifiedBy(); ok {
		if err := identity.VerifiedByValidator(string(v)); err != nil {
			return &ValidationError{Name: "verified_by", err: fmt.Errorf(`ent: validator failed for field "Identity.verified_by": %w`, err)}
		}
	}
	if _, ok := iuo.mutation.OwnerID(); iuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Identity.owner"`)
	}
	return nil
}

func (iuo *IdentityUpdateOne) sqlSave(ctx context.Context) (_node *Identity, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(identity.Table, identity.Columns, sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Identity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, identity.FieldID)
		for _, f := range fields {
			if !identity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != identity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(identity.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.VerifiedBy(); ok {
		_spec.SetField(identity.FieldVerifiedBy, field.TypeString, value)
	}
	if iuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   identity.MemberTable,
			Columns: identity.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedMemberIDs(); len(nodes) > 0 && !iuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   identity.MemberTable,
			Columns: identity.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   identity.MemberTable,
			Columns: identity.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Identity{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
