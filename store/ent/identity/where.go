// Code generated by ent, DO NOT EDIT.

package identity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"khepri.dev/horus"
	"khepri.dev/horus/store/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Identity {
	return predicate.Identity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Identity {
	return predicate.Identity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Identity {
	return predicate.Identity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Identity {
	return predicate.Identity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Identity {
	return predicate.Identity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Identity {
	return predicate.Identity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Identity {
	return predicate.Identity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Identity {
	return predicate.Identity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Identity {
	return predicate.Identity(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Identity {
	return predicate.Identity(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Identity {
	return predicate.Identity(sql.FieldContainsFold(FieldID, id))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v uuid.UUID) predicate.Identity {
	return predicate.Identity(sql.FieldEQ(FieldOwnerID, v))
}

// Kind applies equality check predicate on the "kind" field. It's identical to KindEQ.
func Kind(v horus.IdentityKind) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldEQ(FieldKind, vc))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Identity {
	return predicate.Identity(sql.FieldEQ(FieldName, v))
}

// VerifiedBy applies equality check predicate on the "verified_by" field. It's identical to VerifiedByEQ.
func VerifiedBy(v horus.Verifier) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldEQ(FieldVerifiedBy, vc))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Identity {
	return predicate.Identity(sql.FieldEQ(FieldCreatedAt, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v uuid.UUID) predicate.Identity {
	return predicate.Identity(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v uuid.UUID) predicate.Identity {
	return predicate.Identity(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...uuid.UUID) predicate.Identity {
	return predicate.Identity(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...uuid.UUID) predicate.Identity {
	return predicate.Identity(sql.FieldNotIn(FieldOwnerID, vs...))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v horus.IdentityKind) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldEQ(FieldKind, vc))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v horus.IdentityKind) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldNEQ(FieldKind, vc))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...horus.IdentityKind) predicate.Identity {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Identity(sql.FieldIn(FieldKind, v...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...horus.IdentityKind) predicate.Identity {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Identity(sql.FieldNotIn(FieldKind, v...))
}

// KindGT applies the GT predicate on the "kind" field.
func KindGT(v horus.IdentityKind) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldGT(FieldKind, vc))
}

// KindGTE applies the GTE predicate on the "kind" field.
func KindGTE(v horus.IdentityKind) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldGTE(FieldKind, vc))
}

// KindLT applies the LT predicate on the "kind" field.
func KindLT(v horus.IdentityKind) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldLT(FieldKind, vc))
}

// KindLTE applies the LTE predicate on the "kind" field.
func KindLTE(v horus.IdentityKind) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldLTE(FieldKind, vc))
}

// KindContains applies the Contains predicate on the "kind" field.
func KindContains(v horus.IdentityKind) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldContains(FieldKind, vc))
}

// KindHasPrefix applies the HasPrefix predicate on the "kind" field.
func KindHasPrefix(v horus.IdentityKind) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldHasPrefix(FieldKind, vc))
}

// KindHasSuffix applies the HasSuffix predicate on the "kind" field.
func KindHasSuffix(v horus.IdentityKind) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldHasSuffix(FieldKind, vc))
}

// KindEqualFold applies the EqualFold predicate on the "kind" field.
func KindEqualFold(v horus.IdentityKind) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldEqualFold(FieldKind, vc))
}

// KindContainsFold applies the ContainsFold predicate on the "kind" field.
func KindContainsFold(v horus.IdentityKind) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldContainsFold(FieldKind, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Identity {
	return predicate.Identity(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Identity {
	return predicate.Identity(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Identity {
	return predicate.Identity(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Identity {
	return predicate.Identity(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Identity {
	return predicate.Identity(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Identity {
	return predicate.Identity(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Identity {
	return predicate.Identity(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Identity {
	return predicate.Identity(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Identity {
	return predicate.Identity(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Identity {
	return predicate.Identity(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Identity {
	return predicate.Identity(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Identity {
	return predicate.Identity(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Identity {
	return predicate.Identity(sql.FieldContainsFold(FieldName, v))
}

// VerifiedByEQ applies the EQ predicate on the "verified_by" field.
func VerifiedByEQ(v horus.Verifier) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldEQ(FieldVerifiedBy, vc))
}

// VerifiedByNEQ applies the NEQ predicate on the "verified_by" field.
func VerifiedByNEQ(v horus.Verifier) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldNEQ(FieldVerifiedBy, vc))
}

// VerifiedByIn applies the In predicate on the "verified_by" field.
func VerifiedByIn(vs ...horus.Verifier) predicate.Identity {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Identity(sql.FieldIn(FieldVerifiedBy, v...))
}

// VerifiedByNotIn applies the NotIn predicate on the "verified_by" field.
func VerifiedByNotIn(vs ...horus.Verifier) predicate.Identity {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Identity(sql.FieldNotIn(FieldVerifiedBy, v...))
}

// VerifiedByGT applies the GT predicate on the "verified_by" field.
func VerifiedByGT(v horus.Verifier) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldGT(FieldVerifiedBy, vc))
}

// VerifiedByGTE applies the GTE predicate on the "verified_by" field.
func VerifiedByGTE(v horus.Verifier) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldGTE(FieldVerifiedBy, vc))
}

// VerifiedByLT applies the LT predicate on the "verified_by" field.
func VerifiedByLT(v horus.Verifier) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldLT(FieldVerifiedBy, vc))
}

// VerifiedByLTE applies the LTE predicate on the "verified_by" field.
func VerifiedByLTE(v horus.Verifier) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldLTE(FieldVerifiedBy, vc))
}

// VerifiedByContains applies the Contains predicate on the "verified_by" field.
func VerifiedByContains(v horus.Verifier) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldContains(FieldVerifiedBy, vc))
}

// VerifiedByHasPrefix applies the HasPrefix predicate on the "verified_by" field.
func VerifiedByHasPrefix(v horus.Verifier) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldHasPrefix(FieldVerifiedBy, vc))
}

// VerifiedByHasSuffix applies the HasSuffix predicate on the "verified_by" field.
func VerifiedByHasSuffix(v horus.Verifier) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldHasSuffix(FieldVerifiedBy, vc))
}

// VerifiedByEqualFold applies the EqualFold predicate on the "verified_by" field.
func VerifiedByEqualFold(v horus.Verifier) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldEqualFold(FieldVerifiedBy, vc))
}

// VerifiedByContainsFold applies the ContainsFold predicate on the "verified_by" field.
func VerifiedByContainsFold(v horus.Verifier) predicate.Identity {
	vc := string(v)
	return predicate.Identity(sql.FieldContainsFold(FieldVerifiedBy, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Identity {
	return predicate.Identity(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Identity {
	return predicate.Identity(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Identity {
	return predicate.Identity(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Identity {
	return predicate.Identity(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Identity {
	return predicate.Identity(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Identity {
	return predicate.Identity(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Identity {
	return predicate.Identity(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Identity {
	return predicate.Identity(sql.FieldLTE(FieldCreatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Identity {
	return predicate.Identity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Identity {
	return predicate.Identity(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Identity) predicate.Identity {
	return predicate.Identity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Identity) predicate.Identity {
	return predicate.Identity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Identity) predicate.Identity {
	return predicate.Identity(func(s *sql.Selector) {
		p(s.Not())
	})
}
