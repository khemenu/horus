// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"khepri.dev/horus/store/ent/org"
)

// Org is the model entity for the Org schema.
type Org struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrgQuery when eager-loading is set.
	Edges        OrgEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrgEdges holds the relations/edges for other nodes in the graph.
type OrgEdges struct {
	// Teams holds the value of the teams edge.
	Teams []*Team `json:"teams,omitempty"`
	// Members holds the value of the members edge.
	Members []*Member `json:"members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TeamsOrErr returns the Teams value or an error if the edge
// was not loaded in eager-loading.
func (e OrgEdges) TeamsOrErr() ([]*Team, error) {
	if e.loadedTypes[0] {
		return e.Teams, nil
	}
	return nil, &NotLoadedError{edge: "teams"}
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e OrgEdges) MembersOrErr() ([]*Member, error) {
	if e.loadedTypes[1] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Org) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case org.FieldName:
			values[i] = new(sql.NullString)
		case org.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case org.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Org fields.
func (o *Org) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case org.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case org.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case org.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Org.
// This includes values selected through modifiers, order, etc.
func (o *Org) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryTeams queries the "teams" edge of the Org entity.
func (o *Org) QueryTeams() *TeamQuery {
	return NewOrgClient(o.config).QueryTeams(o)
}

// QueryMembers queries the "members" edge of the Org entity.
func (o *Org) QueryMembers() *MemberQuery {
	return NewOrgClient(o.config).QueryMembers(o)
}

// Update returns a builder for updating this Org.
// Note that you need to call Org.Unwrap() before calling this method if this Org
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Org) Update() *OrgUpdateOne {
	return NewOrgClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Org entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Org) Unwrap() *Org {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Org is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Org) String() string {
	var builder strings.Builder
	builder.WriteString("Org(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Orgs is a parsable slice of Org.
type Orgs []*Org
